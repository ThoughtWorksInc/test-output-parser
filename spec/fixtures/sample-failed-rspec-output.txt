$ git fetch --prune --all
Fetching origin
From git://localhost/ThoughtWorksInc/go-saas-rails
   a7722ce..7c95c46  master     -> origin/master
Command git fetch --prune --all exited successfully with status 0.

$ git reset --hard FETCH_HEAD
HEAD is now at 7c95c46 marano/fernando #1063 Fix times admin query.
Command git reset --hard FETCH_HEAD exited successfully with status 0.

$ git clean -fdx
Command git clean -fdx exited successfully with status 0.

$ git checkout master
Already on 'master'
Command git checkout master exited successfully with status 0.

$ git reset --hard 7c95c46e962a0d8201e5aff547eee382f9e22f2d
HEAD is now at 7c95c46 marano/fernando #1063 Fix times admin query.
Command git reset --hard 7c95c46e962a0d8201e5aff547eee382f9e22f2d exited successfully with status 0.

$ git submodule update --init
Command git submodule update --init exited successfully with status 0.

$ git remote set-url --push origin 'git@github.com:ThoughtWorksInc/go-saas-rails'
Command git remote set-url --push origin 'git@github.com:ThoughtWorksInc/go-saas-rails' exited successfully with status 0.

$ export SNAP_CI=true
$ export CI=true
$ export LANG=en_US.UTF-8
$ export LC_ALL=en_US.UTF-8
$ export SNAP_PIPELINE_COUNTER=1772
$ export SNAP_STAGE_NAME=Rspec
$ export SNAP_BRANCH=master
$ export SNAP_COMMIT=7c95c46e962a0d8201e5aff547eee382f9e22f2d
$ export SNAP_COMMIT_SHORT=7c95c46

$ /bin/ln -sf /etc/go_saas/database-postgresql.yml config/database.yml
Command /bin/ln -sf /etc/go_saas/database-postgresql.yml config/database.yml exited successfully with status 0. Took 0.02916 seconds.

$ ./.init.sh
+++ pwd
++ basename /var/go/repo
+ BUNDLE_PATH=/tmp/.bundle-repo
+ '[' '!' -z true ']'
+ BUNDLE_PATH=/var/go/.bundle
+ mkdir -p /var/go/.bundle
+ rm vendor/bundle
rm: cannot remove `vendor/bundle': No such file or directory
+ ln -sf /var/go/.bundle vendor/bundle
+ bundle install --local --path vendor/bundle --binstubs --clean
Using rake (10.1.0) 
Using i18n (0.6.9) 
Using multi_json (1.8.4) 
Using activesupport (3.2.16) 
Using builder (3.0.4) 
Using activemodel (3.2.16) 
Using erubis (2.7.0) 
Using journey (1.0.4) 
Using rack (1.4.5) 
Using rack-cache (1.2) 
Using rack-test (0.6.2) 
Using hike (1.2.3) 
Using tilt (1.4.1) 
Using sprockets (2.2.2) 
Using actionpack (3.2.16) 
Using mime-types (1.25.1) 
Using polyglot (0.3.3) 
Using treetop (1.4.15) 
Using mail (2.5.4) 
Using actionmailer (3.2.16) 
Using arel (3.0.3) 
Using tzinfo (0.3.38) 
Using activerecord (3.2.16) 
Using activeresource (3.2.16) 
Using addressable (2.3.5) 
Using fastercsv (1.5.5) 
Using haml (4.0.5) 
Using highline (1.6.20) 
Using sexp_processor (4.4.1) 
Using ruby_parser (3.2.2) 
Using ruby2ruby (2.0.7) 
Using sass (3.2.13) 
Using temple (0.6.7) 
Using slim (2.0.2) 
Using terminal-table (1.4.5) 
Using brakeman (2.3.1) 
Using nokogiri (1.5.6) 
Using ffi (1.9.0) 
Using childprocess (0.3.9) 
Using rubyzip (0.9.9) 
Using websocket (1.0.7) 
Using selenium-webdriver (2.33.0) 
Using xpath (1.0.0) 
Using capybara (2.0.2) 
Using capybara-screenshot (0.3.4) 
Using chunky_png (1.2.7) 
Using coderay (1.1.0) 
Using columnize (0.3.6) 
Using fssm (0.2.9) 
Using compass (0.12.2) 
Using companimation (0.2.0) 
Using compass-rails (1.0.3) 
Using crack (0.3.1) 
Using css_parser (1.3.5) 
Using debugger-linecache (1.2.0) 
Using debugger-ruby_core_source (1.2.4) 
Using debugger (1.6.2) 
Using delayed_job (3.0.4) 
Using delayed_job_active_record (0.3.3) 
Using diff-lcs (1.1.3) 
Using eventmachine (1.0.0) 
Using execjs (1.4.0) 
Using factory_girl (4.1.0) 
Using rack-ssl (1.3.3) 
Using json (1.7.7) 
Using rdoc (3.12.2) 
Using thor (0.18.1) 
Using railties (3.2.16) 
Using factory_girl_rails (4.1.0) 
Using multipart-post (1.1.5) 
Using faraday (0.8.4) 
Using faraday_middleware (0.9.0) 
Using gemnasium-parser (0.1.9) 
Using hashie (1.2.0) 
Using multi_xml (0.5.1) 
Using httparty (0.9.0) 
Using hipchat (0.7.0) 
Using htmlentities (4.3.1) 
Using http_parser.rb (0.5.3) 
Using httpauth (0.2.0) 
Using inflection (1.0.0) 
Using jasmine-core (1.3.1) 
Using rspec-core (2.12.2) 
Using rspec-expectations (2.12.1) 
Using rspec-mocks (2.12.1) 
Using rspec (2.12.0) 
Using jasmine (1.3.2) 
Using jbuilder (1.5.1) 
Using jquery-rails (2.1.4) 
Using jwt (0.1.8) 
Using kaminari (0.14.1) 
Using method_source (0.8.2) 
Using mixpanel-ruby (1.0.0) 
Using newrelic_rpm (3.7.1.182) 
Using oauth2 (0.8.1) 
Using omniauth (1.1.4) 
Using omniauth-oauth2 (1.1.1) 
Using omniauth-heroku (0.1.1) 
Using pg (0.14.1) 
Using premailer (1.7.9) 
Using premailer-rails (1.6.0) 
Using slop (3.4.7) 
Using pry (0.9.12.4) 
Using bundler (1.3.5) 
Using rails (3.2.16) 
Using rb-readline (0.5.1) 
Using rspec-rails (2.12.1) 
Using sass-rails (3.2.5) 
Using simple_oauth (0.1.9) 
Using simplecov-html (0.7.1) 
Using simplecov (0.7.1) 
Using spork (1.0.0rc3) 
Using spork-rails (3.2.1) 
Using sshkey (1.3.1) 
Using strip_attributes (1.4.1) 
Using twitter-stream (0.1.16) 
Using tinder (1.9.2) 
Using uglifier (1.3.0) 
Using webmock (1.9.0) 
Using zendesk_api (0.3.5) 
Updating files in vendor/cache
Your bundle is complete!
It was installed into ./vendor/bundle
Command ./.init.sh exited successfully with status 0. Took 2.52 seconds.

$ bundle exec rake db:drop db:create db:migrate db:test:prepare
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -> 0.0034s
==  CreateUsers: migrated (0.0036s) ===========================================

==  CreateSshKeys: migrating ==================================================
-- create_table(:ssh_keys)
   -> 0.0031s
==  CreateSshKeys: migrated (0.0031s) =========================================

==  CreateProjects: migrating =================================================
-- create_table(:projects)
   -> 0.0032s
==  CreateProjects: migrated (0.0034s) ========================================

==  AddProjectIdToSshKeys: migrating ==========================================
-- change_table(:ssh_keys)
   -> 0.0005s
==  AddProjectIdToSshKeys: migrated (0.0009s) =================================

==  AddNameToUser: migrating ==================================================
-- add_column(:users, :login_name, :string)
   -> 0.0013s
==  AddNameToUser: migrated (0.0014s) =========================================

==  AddRailsRootAndGoServerHostToProjects: migrating ==========================
-- add_column(:projects, :rails_root, :string)
   -> 0.0004s
-- add_column(:projects, :go_server_host, :string)
   -> 0.0003s
==  AddRailsRootAndGoServerHostToProjects: migrated (0.0015s) =================

==  AddSessionsTable: migrating ===============================================
-- create_table(:sessions)
   -> 0.0030s
-- add_index(:sessions, :session_id)
   -> 0.0018s
-- add_index(:sessions, :updated_at)
   -> 0.0022s
==  AddSessionsTable: migrated (0.0080s) ======================================

==  CreatePipelineInstances: migrating ========================================
-- create_table(:pipeline_instances)
   -> 0.0030s
==  CreatePipelineInstances: migrated (0.0032s) ===============================

==  CreateStageInstances: migrating ===========================================
-- create_table(:stage_instances)
   -> 0.0032s
==  CreateStageInstances: migrated (0.0035s) ==================================

==  AddCommitMessagesToPipelineInstance: migrating ============================
-- add_column(:pipeline_instances, :commit_messages, :text)
   -> 0.0004s
==  AddCommitMessagesToPipelineInstance: migrated (0.0008s) ===================

==  CreateGoServerPool: migrating =============================================
-- create_table(:go_server_pool)
   -> 0.0031s
==  CreateGoServerPool: migrated (0.0032s) ====================================

==  CreateCollaborations: migrating ===========================================
-- create_table(:collaborations)
   -> 0.0021s
==  CreateCollaborations: migrated (0.0021s) ==================================

==  DropUserFromProject: migrating ============================================
-- remove_column(:projects, :user_id)
   -> 0.0006s
==  DropUserFromProject: migrated (0.0007s) ===================================

==  AddEmailToUser: migrating =================================================
-- add_column(:users, :email, :string)
   -> 0.0004s
==  AddEmailToUser: migrated (0.0008s) ========================================

==  AddProvisioningStatusToProject: migrating =================================
-- add_column(:projects, :provisioning_status, :string, {:default=>:provisioning})
   -> 0.0032s
==  AddProvisioningStatusToProject: migrated (0.0036s) ========================

==  ChangeProvisioningStatusToProvisionedCount: migrating =====================
-- add_column(:projects, :provisioned_count, :integer, {:default=>0})
   -> 0.0034s
-- rename_column(:projects, :provisioning_status, :x_provisioning_status)
   -> 0.0003s
==  ChangeProvisioningStatusToProvisionedCount: migrated (0.0044s) ============

==  DeprecateGoServerPoolTable: migrating =====================================
-- rename_table(:go_server_pool, :x_go_server_pool)
   -> 0.0021s
==  DeprecateGoServerPoolTable: migrated (0.0024s) ============================

==  AddProvisionedFlagToProjects: migrating ===================================
-- rename_column(:projects, :provisioned_count, :x_provisioning_count)
   -> 0.0004s
-- add_column(:projects, :provisioned, :boolean, {:default=>false})
   -> 0.0028s
==  AddProvisionedFlagToProjects: migrated (0.0039s) ==========================

==  AddWorkerStatusToProject: migrating =======================================
-- add_column(:projects, :worker_status, :text)
   -> 0.0004s
==  AddWorkerStatusToProject: migrated (0.0008s) ==============================

==  CreateGoCommits: migrating ================================================
-- create_table(:go_commits)
   -> 0.0033s
==  CreateGoCommits: migrated (0.0034s) =======================================

==  CreateGoJobs: migrating ===================================================
-- create_table(:go_jobs)
   -> 0.0030s
==  CreateGoJobs: migrated (0.0031s) ==========================================

==  CreateGoStages: migrating =================================================
-- create_table(:go_stages)
   -> 0.0031s
==  CreateGoStages: migrated (0.0032s) ========================================

==  CreateGoPipelines: migrating ==============================================
-- create_table(:go_pipelines)
   -> 0.0031s
==  CreateGoPipelines: migrated (0.0032s) =====================================

==  RemovePipelineInstances: migrating ========================================
-- rename_table(:pipeline_instances, :x_pipeline_instances)
   -> 0.0017s
==  RemovePipelineInstances: migrated (0.0018s) ===============================

==  RemoveStageInstances: migrating ===========================================
-- rename_table(:stage_instances, :x_stage_instances)
   -> 0.0017s
==  RemoveStageInstances: migrated (0.0018s) ==================================

==  AddAdditionalJobProperties: migrating =====================================
-- execute("delete from go_jobs")
   -> 0.0003s
-- add_column(:go_jobs, :duration, :integer, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :result, :string, {:null=>false})
   -> 0.0004s
-- add_column(:go_jobs, :scheduled, :datetime, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :assigned, :datetime, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :preparing, :datetime, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :building, :datetime, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :completing, :datetime, {:null=>false})
   -> 0.0003s
-- add_column(:go_jobs, :completed, :datetime, {:null=>false})
   -> 0.0004s
==  AddAdditionalJobProperties: migrated (0.0052s) ============================

==  AddIdentifiersToPipelinesStagesAndJobs: migrating =========================
-- execute("delete from go_pipelines")
   -> 0.0003s
-- add_column("go_pipelines", :identifier, :string, {:null=>false})
   -> 0.0004s
-- execute("delete from go_stages")
   -> 0.0003s
-- add_column("go_stages", :identifier, :string, {:null=>false})
   -> 0.0003s
-- execute("delete from go_jobs")
   -> 0.0003s
-- add_column("go_jobs", :identifier, :string, {:null=>false})
   -> 0.0003s
-- add_index(:go_pipelines, [:project_id, :identifier], {:unique=>true})
   -> 0.0021s
-- add_index(:go_stages, [:pipeline_id, :identifier], {:unique=>true})
   -> 0.0018s
-- add_index(:go_jobs, [:stage_id, :identifier], {:unique=>true})
   -> 0.0019s
==  AddIdentifiersToPipelinesStagesAndJobs: migrated (0.0104s) ================

==  RemoveDeprecatedStuff: migrating ==========================================
-- remove_column(:projects, :x_provisioning_status)
   -> 0.0005s
-- remove_column(:projects, :x_provisioning_count)
   -> 0.0004s
-- drop_table(:x_go_server_pool)
   -> 0.0008s
-- drop_table(:x_pipeline_instances)
   -> 0.0007s
-- drop_table(:x_stage_instances)
   -> 0.0007s
==  RemoveDeprecatedStuff: migrated (0.0049s) =================================

==  AddUniqueIndexToPipelineStageJobUrls: migrating ===========================
-- add_index(:go_jobs, [:stage_id, :url], {:unique=>true})
   -> 0.0023s
-- add_index(:go_stages, [:pipeline_id, :url], {:unique=>true})
   -> 0.0021s
-- add_index(:go_pipelines, [:project_id, :url], {:unique=>true})
   -> 0.0021s
==  AddUniqueIndexToPipelineStageJobUrls: migrated (0.0066s) ==================

==  ChangeNameToFullNameForProject: migrating =================================
-- rename_column(:projects, :name, :full_name)
   -> 0.0004s
==  ChangeNameToFullNameForProject: migrated (0.0004s) ========================

==  AddGithubIdToSshKey: migrating ============================================
-- add_column(:ssh_keys, :github_id, :integer)
   -> 0.0004s
==  AddGithubIdToSshKey: migrated (0.0004s) ===================================

==  DropNotNullConstraintsOnGoJobs: migrating =================================
-- change_column(:go_jobs, :assigned, :datetime, {:null=>true})
   -> 0.0006s
-- change_column(:go_jobs, :preparing, :datetime, {:null=>true})
   -> 0.0005s
-- change_column(:go_jobs, :building, :datetime, {:null=>true})
   -> 0.0005s
-- change_column(:go_jobs, :completing, :datetime, {:null=>true})
   -> 0.0005s
==  DropNotNullConstraintsOnGoJobs: migrated (0.0024s) ========================

==  AddLatestAtomEntryIdToProject: migrating ==================================
-- add_column(:projects, :latest_atom_entry_id, :string)
   -> 0.0004s
==  AddLatestAtomEntryIdToProject: migrated (0.0005s) =========================

==  ExpandGoCommitsMessageColumnToTextFromString: migrating ===================
-- change_column(:go_commits, :message, :text, {:null=>true})
   -> 0.0006s
==  ExpandGoCommitsMessageColumnToTextFromString: migrated (0.0007s) ==========

==  AddOrderingColumnToPipelinesAndStages: migrating ==========================
-- execute("DELETE FROM go_jobs")
   -> 0.0004s
-- execute("DELETE FROM go_stages")
   -> 0.0003s
-- execute("DELETE FROM go_pipelines")
   -> 0.0003s
-- execute("DELETE FROM go_commits")
   -> 0.0003s
-- execute("UPDATE projects SET latest_atom_entry_id=NULL")
   -> 0.0003s
-- add_column(:go_pipelines, :counter, :integer)
   -> 0.0003s
-- add_column(:go_pipelines, :schedule_time, :datetime)
   -> 0.0003s
-- add_column(:go_stages, :counter, :integer)
   -> 0.0003s
==  AddOrderingColumnToPipelinesAndStages: migrated (0.0029s) =================

==  CreateHerokuCredentials: migrating ========================================
-- create_table(:heroku_credentials)
   -> 0.0031s
==  CreateHerokuCredentials: migrated (0.0032s) ===============================

==  AddHerokuCredentialIdToProject: migrating =================================
-- add_column(:projects, :heroku_credentials_id, :integer)
   -> 0.0004s
==  AddHerokuCredentialIdToProject: migrated (0.0004s) ========================

==  AddHerokuCredentialIdToSshKey: migrating ==================================
-- add_column(:ssh_keys, :heroku_credentials_id, :integer)
   -> 0.0004s
==  AddHerokuCredentialIdToSshKey: migrated (0.0004s) =========================

==  RemoveProjectIdGithubIdHerokuCredentialIdFromSshKeys: migrating ===========
-- remove_column(:ssh_keys, :project_id)
   -> 0.0004s
-- remove_column(:ssh_keys, :github_id)
   -> 0.0003s
==  RemoveProjectIdGithubIdHerokuCredentialIdFromSshKeys: migrated (0.0008s) ==

==  CreateDeployKeys: migrating ===============================================
-- create_table(:deploy_keys)
   -> 0.0023s
==  CreateDeployKeys: migrated (0.0024s) ======================================

==  AddOwnerIdAndOwnerTypeToSshKey: migrating =================================
-- add_column(:ssh_keys, :owner_id, :integer)
   -> 0.0004s
-- add_column(:ssh_keys, :owner_type, :string)
   -> 0.0003s
==  AddOwnerIdAndOwnerTypeToSshKey: migrated (0.0013s) ========================

==  AddBuildingAndBuildStatusToProject: migrating =============================
-- add_column(:projects, :building, :boolean)
   -> 0.0004s
-- add_column(:projects, :build_status, :string)
   -> 0.0004s
==  AddBuildingAndBuildStatusToProject: migrated (0.0015s) ====================

==  CreateDelayedJobs: migrating ==============================================
-- create_table(:delayed_jobs, {:force=>true})
   -> 0.0039s
-- add_index(:delayed_jobs, [:priority, :run_at], {:name=>"delayed_jobs_priority"})
   -> 0.0019s
==  CreateDelayedJobs: migrated (0.0066s) =====================================

==  AddNameToGoJobs: migrating ================================================
-- execute("delete from go_pipelines")
   -> 0.0003s
-- execute("delete from go_stages")
   -> 0.0003s
-- execute("delete from go_jobs")
   -> 0.0002s
-- add_column(:go_jobs, :name, :string, {:null=>false})
   -> 0.0003s
==  AddNameToGoJobs: migrated (0.0019s) =======================================

==  CreateHerokuDeployments: migrating ========================================
-- create_table(:heroku_deployments)
   -> 0.0032s
==  CreateHerokuDeployments: migrated (0.0033s) ===============================

==  RemoveRemoteConfigurationOptionsFromHerokuDeployments: migrating ==========
-- remove_column(:heroku_deployments, :create_remote)
   -> 0.0005s
-- remove_column(:heroku_deployments, :remote_name)
   -> 0.0003s
==  RemoveRemoteConfigurationOptionsFromHerokuDeployments: migrated (0.0013s) =

==  RemoveHerokuCredentialsIdFromProjectsTable: migrating =====================
-- remove_column(:projects, :heroku_credentials_id)
   -> 0.0004s
==  RemoveHerokuCredentialsIdFromProjectsTable: migrated (0.0008s) ============

==  AddDbMigrateOptionToHerokuDeployment: migrating ===========================
-- add_column(:heroku_deployments, :run_db_migrate, :boolean, {:default=>true})
   -> 0.0033s
==  AddDbMigrateOptionToHerokuDeployment: migrated (0.0037s) ==================

==  AddDefaultBranchToProjects: migrating =====================================
-- add_column(:projects, :default_branch, :string)
   -> 0.0005s
-- execute("UPDATE projects SET default_branch='master'")
   -> 0.0003s
-- change_column(:projects, :default_branch, :string, {:null=>false})
   -> 0.0005s
==  AddDefaultBranchToProjects: migrated (0.0016s) ============================

==  MakeHerokuCredentialsMandatoryInHerokuDeployments: migrating ==============
-- execute("DELETE from heroku_deployments")
   -> 0.0003s
-- change_column(:heroku_deployments, :heroku_credentials_id, :integer, {:null=>false})
   -> 0.0005s
==  MakeHerokuCredentialsMandatoryInHerokuDeployments: migrated (0.0017s) =====

==  CreateHipchatCredentials: migrating =======================================
-- create_table(:hipchat_credentials)
   -> 0.0031s
==  CreateHipchatCredentials: migrated (0.0035s) ==============================

==  CreateHipchatNotifications: migrating =====================================
-- create_table(:hipchat_notifications)
   -> 0.0032s
==  CreateHipchatNotifications: migrated (0.0035s) ============================

==  CreatePostCommits: migrating ==============================================
-- create_table(:post_commits)
   -> 0.0031s
==  CreatePostCommits: migrated (0.0031s) =====================================

==  RenamePostCommitsTable: migrating =========================================
-- rename_table(:post_commits, :post_commit_notifications)
   -> 0.0017s
==  RenamePostCommitsTable: migrated (0.0018s) ================================

==  CreateWebHooks: migrating =================================================
-- create_table(:web_hooks)
   -> 0.0022s
==  CreateWebHooks: migrated (0.0022s) ========================================

==  AddSecretKeyToWebHooks: migrating =========================================
-- execute("delete from web_hooks")
   -> 0.0003s
-- add_column(:web_hooks, :secret_key, :string, {:null=>false})
   -> 0.0014s
==  AddSecretKeyToWebHooks: migrated (0.0018s) ================================

==  PostCommitNotificationShouldBelongToWebHook: migrating ====================
-- execute("delete from post_commit_notifications")
   -> 0.0003s
-- remove_column(:post_commit_notifications, :project_id)
   -> 0.0003s
-- add_column(:post_commit_notifications, :web_hook_id, :integer, {:null=>false})
   -> 0.0003s
==  PostCommitNotificationShouldBelongToWebHook: migrated (0.0011s) ===========

==  CreateContainerNodes: migrating ===========================================
-- create_table(:container_nodes)
   -> 0.0032s
==  CreateContainerNodes: migrated (0.0032s) ==================================

==  CreateProjectEcosystems: migrating ========================================
-- create_table(:project_ecosystems)
   -> 0.0032s
==  CreateProjectEcosystems: migrated (0.0034s) ===============================

==  CreateCampfireCredentials: migrating ======================================
-- create_table(:campfire_credentials)
   -> 0.0029s
==  CreateCampfireCredentials: migrated (0.0033s) =============================

==  CreateCampfireNotifications: migrating ====================================
-- create_table(:campfire_notifications)
   -> 0.0022s
==  CreateCampfireNotifications: migrated (0.0026s) ===========================

==  AddPipelineEndedColumnToProjects: migrating ===============================
-- add_column(:projects, :pipeline_ended, :boolean, {:null=>false, :default=>true})
   -> 0.0033s
==  AddPipelineEndedColumnToProjects: migrated (0.0034s) ======================

==  AddBuildPlanCapacityToUsers: migrating ====================================
-- add_column(:users, :build_plan_capacity, :integer, {:default=>1, :null=>false})
   -> 0.0028s
==  AddBuildPlanCapacityToUsers: migrated (0.0032s) ===========================

==  DropOrphanedWebHooksAndNotifications: migrating ===========================
-- execute("DELETE FROM post_commit_notifications;")
   -> 0.0003s
==  DropOrphanedWebHooksAndNotifications: migrated (0.0044s) ==================

==  CreateAuthorizedUsers: migrating ==========================================
-- create_table(:authorized_users)
   -> 0.0030s
-- add_index(:authorized_users, :github_username, {:unique=>true})
   -> 0.0018s
==  CreateAuthorizedUsers: migrated (0.0263s) =================================

==  ChangeIdentifierToBeNullableInGoStage: migrating ==========================
-- change_column(:go_stages, :identifier, :string, {:null=>true})
   -> 0.0010s
==  ChangeIdentifierToBeNullableInGoStage: migrated (0.0014s) =================

==  ChangeIdentifierToBeNullableInGoPipeline: migrating =======================
-- change_column(:go_pipelines, :identifier, :string, {:null=>true})
   -> 0.0009s
==  ChangeIdentifierToBeNullableInGoPipeline: migrated (0.0010s) ==============

==  ChangeIdentifierAndScheduledAndDurationAndCompletedToBeNullableInGoJob: migrating 
-- change_column(:go_jobs, :identifier, :string, {:null=>true})
   -> 0.0009s
-- change_column(:go_jobs, :scheduled, :datetime, {:null=>true})
   -> 0.0005s
-- change_column(:go_jobs, :duration, :integer, {:null=>true})
   -> 0.0005s
-- change_column(:go_jobs, :completed, :datetime, {:null=>true})
   -> 0.0005s
==  ChangeIdentifierAndScheduledAndDurationAndCompletedToBeNullableInGoJob: migrated (0.0036s) 

==  ClearOldWorkerStatuses: migrating =========================================
==  ClearOldWorkerStatuses: migrated (0.0017s) ================================

==  AddProvisioningErrorsToProject: migrating =================================
-- add_column(:projects, :provisioning_errors, :text)
   -> 0.0004s
==  AddProvisioningErrorsToProject: migrated (0.0006s) ========================

==  MakeAllFieldsNullableInProjectEcosystem: migrating ========================
-- change_column(:project_ecosystems, :project_id, :integer, {:null=>true})
   -> 0.0006s
-- change_column(:project_ecosystems, :zone_id, :integer, {:null=>true})
   -> 0.0005s
-- change_column(:project_ecosystems, :vz_host_ip, :string, {:null=>true})
   -> 0.0005s
-- change_column(:project_ecosystems, :git_url, :string, {:null=>true})
   -> 0.0005s
==  MakeAllFieldsNullableInProjectEcosystem: migrated (0.0024s) ===============

==  MakeFewFieldsNullableInContainerNode: migrating ===========================
-- change_column(:container_nodes, :client_key, :text, {:null=>true})
   -> 0.0006s
-- change_column(:container_nodes, :go_agent_uuid, :string, {:null=>true})
   -> 0.0005s
-- change_column(:container_nodes, :short_hostname, :string, {:null=>true})
   -> 0.0005s
==  MakeFewFieldsNullableInContainerNode: migrated (0.0018s) ==================

==  ClearOldWorkerStatusesAgain: migrating ====================================
==  ClearOldWorkerStatusesAgain: migrated (0.0008s) ===========================

==  CreateSettings: migrating =================================================
-- create_table(:settings)
   -> 0.0031s
==  CreateSettings: migrated (0.0033s) ========================================

==  AddCurrentlyRunningStageToProject: migrating ==============================
-- add_column(:projects, :currently_running_stage, :text)
   -> 0.0004s
==  AddCurrentlyRunningStageToProject: migrated (0.0007s) =====================

==  Jan142013ClearOldWorkerStatuses: migrating ================================
==  Jan142013ClearOldWorkerStatuses: migrated (0.0008s) =======================

==  AddCurrentFlagToStagesToBeAbleToShowIndicatorsToUsers: migrating ==========
-- add_column(:go_stages, :current, :boolean, {:null=>false, :default=>false})
   -> 0.0040s
==  AddCurrentFlagToStagesToBeAbleToShowIndicatorsToUsers: migrated (0.0044s) =

==  AddDeletionInProgressFlagToProjectEcosystem: migrating ====================
-- add_column(:project_ecosystems, :deletion_in_progress, :boolean, {:default=>false})
   -> 0.0028s
==  AddDeletionInProgressFlagToProjectEcosystem: migrated (0.0032s) ===========

==  DropResultColumnOnStage: migrating ========================================
-- remove_column(:go_stages, :result)
   -> 0.0004s
==  DropResultColumnOnStage: migrated (0.0005s) ===============================

==  AddDeletionErrorToProjectEcosystem: migrating =============================
-- add_column(:project_ecosystems, :deletion_errors, :text, {:default=>nil})
   -> 0.0004s
==  AddDeletionErrorToProjectEcosystem: migrated (0.0005s) ====================

==  CreateEnvironmentVariables: migrating =====================================
-- create_table(:environment_variables)
   -> 0.0030s
==  CreateEnvironmentVariables: migrated (0.0030s) ============================

==  AddEnvNameAndAutoDeployToHerokuDeployment: migrating ======================
-- add_column(:heroku_deployments, :environment_name, :string)
   -> 0.0004s
-- add_column(:heroku_deployments, :auto_deploy, :boolean)
   -> 0.0003s
==  AddEnvNameAndAutoDeployToHerokuDeployment: migrated (0.0008s) =============

==  AddDefaultEnvNameAndAutodeployFlagForExistingProjects: migrating ==========
==  AddDefaultEnvNameAndAutodeployFlagForExistingProjects: migrated (0.0022s) =

==  AddAutoDeployFlagToGoStage: migrating =====================================
-- add_column(:go_stages, :auto_deploy, :boolean, {:default=>true, :null=>false})
   -> 0.0039s
==  AddAutoDeployFlagToGoStage: migrated (0.0039s) ============================

==  RenamePostCommitNotificationToBuildRequest: migrating =====================
-- rename_table("post_commit_notifications", "build_requests")
   -> 0.0016s
-- add_column(:build_requests, :stage_id, :integer)
   -> 0.0003s
-- add_column(:build_requests, :pipeline_id, :integer)
   -> 0.0003s
-- add_column(:build_requests, :project_id, :integer)
   -> 0.0003s
-- add_column(:build_requests, :type, :string)
   -> 0.0003s
-- change_column(:build_requests, :web_hook_id, :integer, {:null=>true})
   -> 0.0005s
==  RenamePostCommitNotificationToBuildRequest: migrated (0.0036s) ============

==  CreateBuildPlans: migrating ===============================================
-- create_table(:build_plans)
   -> 0.0031s
==  CreateBuildPlans: migrated (0.0032s) ======================================

==  AddSecureToEnvironmentVariables: migrating ================================
-- add_column(:environment_variables, :secure, :boolean, {:default=>false})
   -> 0.0026s
==  AddSecureToEnvironmentVariables: migrated (0.0030s) =======================

==  AddHerokuCredentialsIdToProject: migrating ================================
-- add_column(:projects, :heroku_credentials_id, :integer)
   -> 0.0004s
-- remove_column(:heroku_deployments, :heroku_credentials_id)
   -> 0.0003s
==  AddHerokuCredentialsIdToProject: migrated (0.0022s) =======================

==  PutConstraintsOnProjectFullNameAndRepositoryUrl: migrating ================
-- change_column(:projects, :full_name, :string, {:null=>false})
   -> 0.0006s
-- add_index(:projects, [:full_name], {:unique=>true})
   -> 0.0018s
-- change_column(:projects, :repository_url, :string, {:null=>false})
   -> 0.0005s
==  PutConstraintsOnProjectFullNameAndRepositoryUrl: migrated (0.0037s) =======

==  AddJobStartTimestampToProject: migrating ==================================
-- add_column(:projects, :job_start_time, :datetime)
   -> 0.0004s
==  AddJobStartTimestampToProject: migrated (0.0008s) =========================

==  CreateBuildPlanTasks: migrating ===========================================
-- create_table(:build_plan_tasks)
   -> 0.0035s
==  CreateBuildPlanTasks: migrated (0.0039s) ==================================

==  CreateBuildPlanStages: migrating ==========================================
-- create_table(:build_plan_stages)
   -> 0.0032s
==  CreateBuildPlanStages: migrated (0.0036s) =================================

==  CreateBuildPlanEnvironmentVariables: migrating ============================
-- create_table(:build_plan_environment_variables)
   -> 0.0032s
==  CreateBuildPlanEnvironmentVariables: migrated (0.0032s) ===================

==  CreateGitMaterials: migrating =============================================
-- create_table(:git_materials)
   -> 0.0029s
==  CreateGitMaterials: migrated (0.0032s) ====================================

==  NormalizeGitMaterialFromBuildPlan: migrating ==============================
-- remove_column(:build_plans, :repository_owner_name)
   -> 0.0004s
-- remove_column(:build_plans, :repository_owner_type)
   -> 0.0003s
-- remove_column(:build_plans, :repository_name)
   -> 0.0003s
==  NormalizeGitMaterialFromBuildPlan: migrated (0.0041s) =====================

==  MakeBuildPlanOwnerAPolymorphicAssociation: migrating ======================
-- rename_column(:build_plans, :user_id, :owner_id)
   -> 0.0003s
-- add_column(:build_plans, :owner_type, :string)
   -> 0.0003s
-- execute("UPDATE build_plans SET owner_type='User'")
   -> 0.0003s
-- change_column(:build_plans, :owner_type, :string, {:null=>false})
   -> 0.0006s
==  MakeBuildPlanOwnerAPolymorphicAssociation: migrated (0.0017s) =============

==  AddRunningFlagToPipeline: migrating =======================================
-- add_column(:go_pipelines, :running, :boolean, {:null=>false, :default=>false})
   -> 0.0041s
==  AddRunningFlagToPipeline: migrated (0.0042s) ==============================

==  AddOwnerToProject: migrating ==============================================
-- add_column(:projects, :owner_id, :integer)
   -> 0.0004s
-- change_column(:projects, :owner_id, :integer, {:null=>false})
   -> 0.0006s
==  AddOwnerToProject: migrated (0.0025s) =====================================

==  AddOrderToBuildPlanStage: migrating =======================================
-- add_column(:build_plan_stages, :stage_order, :integer)
   -> 0.0004s
-- add_column(:build_plan_tasks, :task_order, :integer)
   -> 0.0004s
-- change_column(:build_plan_stages, :stage_order, :integer, {:null=>false})
   -> 0.0005s
-- change_column(:build_plan_tasks, :task_order, :integer, {:null=>false})
   -> 0.0005s
-- add_index(:build_plan_stages, [:build_plan_id, :stage_order])
   -> 0.0020s
-- add_index(:build_plan_tasks, [:stage_id, :task_order])
   -> 0.0016s
==  AddOrderToBuildPlanStage: migrated (0.0125s) ==============================

==  AddUniquenessConstraintOnStageNameInBuildPlan: migrating ==================
-- add_index(:build_plan_stages, [:build_plan_id, :name])
   -> 0.0020s
==  AddUniquenessConstraintOnStageNameInBuildPlan: migrated (0.0022s) =========

==  ChangeRunifDefaultToPassedForStages: migrating ============================
-- change_column(:build_plan_tasks, :runif, :string, {:default=>"passed", :null=>false})
   -> 0.0014s
-- execute("UPDATE build_plan_tasks SET runif='passed' WHERE runif='success'")
   -> 0.0004s
==  ChangeRunifDefaultToPassedForStages: migrated (0.0026s) ===================

==  AddRunListToBuildPlan: migrating ==========================================
-- add_column(:build_plans, :run_list, :string)
   -> 0.0004s
==  AddRunListToBuildPlan: migrated (0.0007s) =================================

==  AddPipelineXmlToPostCommitNotification: migrating =========================
-- add_column(:build_requests, :pipeline_xml, :text)
   -> 0.0004s
==  AddPipelineXmlToPostCommitNotification: migrated (0.0008s) ================

==  MergeHerokuDeploymentsAndBuildPlanStages: migrating =======================
-- change_table(:build_plan_stages)
   -> 0.0054s
-- execute("UPDATE build_plan_stages SET type='BuildPlan::ConfigurableStage'")
   -> 0.0003s
-- execute("UPDATE build_plan_stages SET type='HerokuDeployment' where type IS NULL")
   -> 0.0002s
-- rename_table(:environment_variables, :x_environment_variables)
   -> 0.0019s
-- rename_table(:heroku_deployments, :x_heroku_deployments)
   -> 0.0016s
==  MergeHerokuDeploymentsAndBuildPlanStages: migrated (0.0140s) ==============

==  EnvironmentVariableUniqueIndexOnKeyInScopeOfOwner: migrating ==============
-- add_index(:build_plan_environment_variables, [:key, :environment_id, :environment_type], {:unique=>true, :name=>"ev_idx_on_key_and_owner"})
   -> 0.0019s
==  EnvironmentVariableUniqueIndexOnKeyInScopeOfOwner: migrated (0.0023s) =====

==  BuildPlanStageNameIndexOnNameInScopeOfBuildPlan: migrating ================
-- add_index(:build_plan_stages, [:name, :build_plan_id], {:unique=>true})
   -> 0.0023s
==  BuildPlanStageNameIndexOnNameInScopeOfBuildPlan: migrated (0.0025s) =======

==  AddPausedToProject: migrating =============================================
-- add_column(:projects, :paused, :boolean, {:default=>false})
   -> 0.0037s
==  AddPausedToProject: migrated (0.0040s) ====================================

==  AddUniqueIndexOnProjectIdAndLabelOnGoPipelines: migrating =================
-- add_index(:go_pipelines, [:project_id, :label], {:unique=>true})
   -> 0.0023s
==  AddUniqueIndexOnProjectIdAndLabelOnGoPipelines: migrated (0.0024s) ========

==  MakeGoPipelineLabelAndNameMandatory: migrating ============================
-- change_column(:go_pipelines, :label, :string, {:null=>false})
   -> 0.0009s
-- change_column(:go_pipelines, :name, :string, {:null=>false})
   -> 0.0005s
==  MakeGoPipelineLabelAndNameMandatory: migrated (0.0016s) ===================

==  AddHerokuCredentialsToBuildPlan: migrating ================================
-- add_column(:build_plans, :heroku_credentials_id, :integer)
   -> 0.0004s
==  AddHerokuCredentialsToBuildPlan: migrated (0.0037s) =======================

==  RemoveHerokuCredentialsFromProject: migrating =============================
-- remove_column(:projects, :heroku_credentials_id)
   -> 0.0004s
==  RemoveHerokuCredentialsFromProject: migrated (0.0007s) ====================

==  TransferHerokuCredentialsFromUserToBuildPlan: migrating ===================
-- rename_column(:heroku_credentials, :user_id, :x_user_id)
   -> 0.0004s
==  TransferHerokuCredentialsFromUserToBuildPlan: migrated (0.0038s) ==========

==  InvertForeignKeyBetweenBuildPlanAndHerokuCredentials: migrating ===========
-- add_column(:heroku_credentials, :build_plan_id, :integer)
   -> 0.0004s
-- change_column(:heroku_credentials, :build_plan_id, :integer, {:null=>false})
   -> 0.0006s
-- rename_column(:build_plans, :heroku_credentials_id, :x_heroku_credentials_id)
   -> 0.0005s
==  InvertForeignKeyBetweenBuildPlanAndHerokuCredentials: migrated (0.0051s) ==

==  DropDefaultBranchColumnOnProject: migrating ===============================
-- change_column(:projects, :default_branch, :string, {:null=>true})
   -> 0.0006s
-- rename_column(:projects, :default_branch, :x_default_branch)
   -> 0.0003s
==  DropDefaultBranchColumnOnProject: migrated (0.0017s) ======================

==  DropGoServerHostColumnOnProject: migrating ================================
-- rename_column(:projects, :go_server_host, :x_go_server_host)
   -> 0.0004s
==  DropGoServerHostColumnOnProject: migrated (0.0007s) =======================

==  DropRailsRootColumnOnProject: migrating ===================================
-- rename_column(:projects, :rails_root, :x_rails_root)
   -> 0.0003s
==  DropRailsRootColumnOnProject: migrated (0.0007s) ==========================

==  DeprecateGitUrlFromProjectEcosystem: migrating ============================
-- rename_column(:project_ecosystems, "git_url", "x_git_url")
   -> 0.0003s
==  DeprecateGitUrlFromProjectEcosystem: migrated (0.0007s) ===================

==  DoNotDefaultApprovalTypeOnBuildPlanStages: migrating ======================
-- change_column_default(:build_plan_stages, :approval_type, nil)
   -> 0.0005s
==  DoNotDefaultApprovalTypeOnBuildPlanStages: migrated (0.0009s) =============

==  AddArtifactDirectoriesToBuildPlanStages: migrating ========================
-- add_column(:build_plan_stages, :artifact_directories, :string)
   -> 0.0004s
==  AddArtifactDirectoriesToBuildPlanStages: migrated (0.0008s) ===============

==  StoreArtifactUrls: migrating ==============================================
-- create_table("go_artifacts")
   -> 0.0033s
==  StoreArtifactUrls: migrated (0.0036s) =====================================

==  AddRubyVersionAndDatabaseTypeColumnToBuildPlans: migrating ================
-- add_column(:build_plans, :ruby_version, :string)
   -> 0.0004s
-- add_column(:build_plans, :database_type, :string)
   -> 0.0003s
==  AddRubyVersionAndDatabaseTypeColumnToBuildPlans: migrated (0.0035s) =======

==  DropDatabaseSymlinkTasksFromDb: migrating =================================
==  DropDatabaseSymlinkTasksFromDb: migrated (0.0026s) ========================

==  DropPathEnvironmentVarsFromDb: migrating ==================================
==  DropPathEnvironmentVarsFromDb: migrated (0.0020s) =========================

==  RemoveRubyAbsolutePathsFromAllTasks: migrating ============================
==  RemoveRubyAbsolutePathsFromAllTasks: migrated (0.0021s) ===================

==  RemoveDatabaseFromBuildPlanRunList: migrating =============================
==  RemoveDatabaseFromBuildPlanRunList: migrated (0.0022s) ====================

==  DropWorkerStatusFromProjects: migrating ===================================
-- rename_column(:projects, :worker_status, :x_worker_status)
   -> 0.0005s
==  DropWorkerStatusFromProjects: migrated (0.0009s) ==========================

==  DropWorkerStatusFromBuildPlans: migrating =================================
-- rename_column(:build_plans, :worker_status, :x_worker_status)
   -> 0.0003s
==  DropWorkerStatusFromBuildPlans: migrated (0.0004s) ========================

==  CreateDetectionStates: migrating ==========================================
-- create_table(:detection_states)
   -> 0.0032s
==  CreateDetectionStates: migrated (0.0033s) =================================

==  MarkAllBuildPlansFirstStageAsAutoDeployable: migrating ====================
==  MarkAllBuildPlansFirstStageAsAutoDeployable: migrated (0.0008s) ===========

==  AddDebugMessagesToDetectionStatuses: migrating ============================
-- add_column(:detection_states, :debug_messages, :text)
   -> 0.0004s
==  AddDebugMessagesToDetectionStatuses: migrated (0.0007s) ===================

==  AddLocalGemsPresentFlagToBuildPlans: migrating ============================
-- add_column(:build_plans, :local_gems_present, :boolean, {:default=>false})
   -> 0.0030s
==  AddLocalGemsPresentFlagToBuildPlans: migrated (0.0034s) ===================

==  PopulateNewBuildPlanAttributesFromWorkerStatus: migrating =================
==  PopulateNewBuildPlanAttributesFromWorkerStatus: migrated (0.0022s) ========

==  AddUniquenessConstraintOnBuildPlanStages: migrating =======================
-- remove_index(:build_plan_stages, [:build_plan_id, :name])
   -> 0.0019s
-- remove_index(:build_plan_stages, [:build_plan_id, :stage_order])
   -> 0.0015s
-- remove_index(:build_plan_stages, [:name, :build_plan_id])
   -> 0.0012s
-- add_index(:build_plan_stages, [:build_plan_id, :name], {:unique=>true})
   -> 0.0017s
-- add_index(:build_plan_stages, [:build_plan_id, :stage_order], {:unique=>true})
   -> 0.0021s
==  AddUniquenessConstraintOnBuildPlanStages: migrated (0.0094s) ==============

==  AddUniquenessConstraintOnBuildPlanTasks: migrating ========================
-- remove_index(:build_plan_tasks, [:stage_id, :task_order])
   -> 0.0013s
-- add_index(:build_plan_tasks, [:stage_id, :task_order], {:unique=>true})
   -> 0.0017s
==  AddUniquenessConstraintOnBuildPlanTasks: migrated (0.0036s) ===============

==  CreateBuildStatistics: migrating ==========================================
-- create_table(:build_statistics)
   -> 0.0025s
==  CreateBuildStatistics: migrated (0.0030s) =================================

==  GenerateBuildStatisticsForExistingProjects: migrating =====================
==  GenerateBuildStatisticsForExistingProjects: migrated (0.0027s) ============

==  StoreRegistrants: migrating ===============================================
-- create_table(:registrants)
   -> 0.0020s
==  StoreRegistrants: migrated (0.0023s) ======================================

==  AddArtifactDirectoriesForExistingProjects: migrating ======================
==  AddArtifactDirectoriesForExistingProjects: migrated (0.0026s) =============

==  AddThankedToRegistrant: migrating =========================================
-- add_column(:registrants, :thanked, :boolean, {:default=>false})
   -> 0.0021s
==  AddThankedToRegistrant: migrated (0.0025s) ================================

==  AddInvitedAndInviteCodeToRegistrant: migrating ============================
-- add_column(:registrants, :invited, :boolean, {:default=>false})
   -> 0.0021s
-- add_column(:registrants, :invite_code, :string)
   -> 0.0013s
==  AddInvitedAndInviteCodeToRegistrant: migrated (0.0042s) ===================

==  AddUniqueIndexOnInviteCodeToRegistrants: migrating ========================
-- add_index(:registrants, [:invite_code], {:unique=>true})
   -> 0.0018s
==  AddUniqueIndexOnInviteCodeToRegistrants: migrated (0.0023s) ===============

==  AddJoinedToRegistrants: migrating =========================================
-- add_column(:registrants, :joined, :boolean, {:default=>false})
   -> 0.0037s
==  AddJoinedToRegistrants: migrated (0.0041s) ================================

==  AddRegistrantRefToAuthorizedUser: migrating ===============================
-- change_table(:authorized_users)
   -> 0.0026s
==  AddRegistrantRefToAuthorizedUser: migrated (0.0028s) ======================

==  AddAdminFlagToAuthorizedUsers: migrating ==================================
-- add_column(:authorized_users, :admin, :boolean, {:default=>false})
   -> 0.0055s
==  AddAdminFlagToAuthorizedUsers: migrated (0.0060s) =========================

==  AddDefaultAdminUsers: migrating ===========================================
==  AddDefaultAdminUsers: migrated (0.0245s) ==================================

==  DropTableXEnvironmentVariables: migrating =================================
-- drop_table(:x_environment_variables)
   -> 0.0009s
==  DropTableXEnvironmentVariables: migrated (0.0013s) ========================

==  DropTableXHerokuDeployments: migrating ====================================
-- drop_table(:x_heroku_deployments)
   -> 0.0008s
==  DropTableXHerokuDeployments: migrated (0.0009s) ===========================

==  DropColumnXGitUrlOnProjectEcosystems: migrating ===========================
-- remove_column(:project_ecosystems, :x_git_url)
   -> 0.0004s
==  DropColumnXGitUrlOnProjectEcosystems: migrated (0.0005s) ==================

==  DropColumnXWorkerStatusOnBuildPlans: migrating ============================
-- remove_column(:build_plans, :x_worker_status)
   -> 0.0004s
==  DropColumnXWorkerStatusOnBuildPlans: migrated (0.0004s) ===================

==  DropColumnXHerokuCredentialsIdOnBuildPlans: migrating =====================
-- remove_column(:build_plans, :x_heroku_credentials_id)
   -> 0.0004s
==  DropColumnXHerokuCredentialsIdOnBuildPlans: migrated (0.0005s) ============

==  DropColumnXUserIdOnHerokuCredentials: migrating ===========================
-- remove_column(:heroku_credentials, :x_user_id)
   -> 0.0004s
==  DropColumnXUserIdOnHerokuCredentials: migrated (0.0004s) ==================

==  DropColumnXRailsRootOnProjects: migrating =================================
-- remove_column(:projects, :x_rails_root)
   -> 0.0004s
==  DropColumnXRailsRootOnProjects: migrated (0.0005s) ========================

==  DropColumnXGoServerHostOnProjects: migrating ==============================
-- remove_column(:projects, :x_go_server_host)
   -> 0.0004s
==  DropColumnXGoServerHostOnProjects: migrated (0.0005s) =====================

==  DropColumnXWorkerStatusOnProjects: migrating ==============================
-- remove_column(:projects, :x_worker_status)
   -> 0.0004s
==  DropColumnXWorkerStatusOnProjects: migrated (0.0004s) =====================

==  DropColumnXDefaultBranchOnProjects: migrating =============================
-- remove_column(:projects, :x_default_branch)
   -> 0.0004s
==  DropColumnXDefaultBranchOnProjects: migrated (0.0005s) ====================

==  AddSyncedToRegistrants: migrating =========================================
-- add_column(:registrants, :synced, :boolean, {:default=>false})
   -> 0.0036s
==  AddSyncedToRegistrants: migrated (0.0037s) ================================

==  ResetBuildStatistics: migrating ===========================================
==  ResetBuildStatistics: migrated (0.0020s) ==================================

==  RenameBuildWaitAverageToAverageQueueTimeForBuildStatistics: migrating =====
-- rename_column(:build_statistics, :build_wait_average, :average_queue_time)
   -> 0.0003s
==  RenameBuildWaitAverageToAverageQueueTimeForBuildStatistics: migrated (0.0004s) 

==  CreateRejectedBuilds: migrating ===========================================
-- create_table(:rejected_builds)
   -> 0.0025s
-- add_index(:rejected_builds, :project_id, {:unique=>true})
   -> 0.0016s
==  CreateRejectedBuilds: migrated (0.0049s) ==================================

==  AddIntegrationBranchNameToGitMaterial: migrating ==========================
-- add_column(:git_materials, :integration_branch_name, :string)
   -> 0.0004s
==  AddIntegrationBranchNameToGitMaterial: migrated (0.0005s) =================

==  AddLatestIntegrationAtomEntryIdToProjects: migrating ======================
-- add_column(:projects, :latest_integration_atom_entry_id, :string)
   -> 0.0004s
==  AddLatestIntegrationAtomEntryIdToProjects: migrated (0.0004s) =============

==  RemoveRunListFromBuildPlans: migrating ====================================
-- rename_column(:build_plans, :run_list, :x_run_list)
   -> 0.0003s
==  RemoveRunListFromBuildPlans: migrated (0.0004s) ===========================

==  AddDependentPipelineIdToGoPipeline: migrating =============================
-- add_column(:go_pipelines, :dependent_pipeline_id, :integer)
   -> 0.0004s
==  AddDependentPipelineIdToGoPipeline: migrated (0.0004s) ====================

==  CreateHttpCallbacks: migrating ============================================
-- create_table(:http_callbacks)
   -> 0.0022s
-- add_index(:http_callbacks, :project_id, {:unique=>true})
   -> 0.0015s
==  CreateHttpCallbacks: migrated (0.0038s) ===================================

==  AddApiTokenToUsers: migrating =============================================
-- add_column(:users, :api_token, :string)
   -> 0.0004s
-- change_column(:users, :api_token, :string, {:null=>false})
   -> 0.0006s
==  AddApiTokenToUsers: migrated (0.0036s) ====================================

==  AddIndexOnDependentPipelineIdToGoPipelines: migrating =====================
-- add_index(:go_pipelines, [:dependent_pipeline_id])
   -> 0.0027s
==  AddIndexOnDependentPipelineIdToGoPipelines: migrated (0.0028s) ============

==  DeprecateContainerNodesTable: migrating ===================================
-- rename_table(:container_nodes, :x_container_nodes)
   -> 0.0017s
==  DeprecateContainerNodesTable: migrated (0.0017s) ==========================

==  DeprecateProjectEcosystemsTable: migrating ================================
-- rename_table(:project_ecosystems, :x_project_ecosystems)
   -> 0.0015s
==  DeprecateProjectEcosystemsTable: migrated (0.0016s) =======================

==  AddPrefetchingStatusToProjects: migrating =================================
-- add_column(:projects, :prefetching, :string, {:default=>"not_last_stage_prefetch"})
   -> 0.0039s
-- execute("UPDATE projects SET prefetching='not_last_stage_prefetch'")
   -> 0.0003s
-- change_column(:projects, :prefetching, :string, {:default=>"not_last_stage_prefetch", :null=>false})
   -> 0.0014s
==  AddPrefetchingStatusToProjects: migrated (0.0057s) ========================

==  AddScheduledColumnToBuildRequests: migrating ==============================
-- add_column(:build_requests, :scheduled, :boolean, {:default=>false})
   -> 0.0032s
==  AddScheduledColumnToBuildRequests: migrated (0.0032s) =====================

==  AddIntegrationHeadShaToBuildRequest: migrating ============================
-- add_column(:build_requests, :integration_head_sha, :string)
   -> 0.0004s
==  AddIntegrationHeadShaToBuildRequest: migrated (0.0005s) ===================

==  RecreateContainerNodes: migrating =========================================
-- create_table(:container_nodes)
   -> 0.0022s
==  RecreateContainerNodes: migrated (0.0023s) ================================

==  AddIntegrationBranchCommitToGoCommits: migrating ==========================
-- add_column(:go_commits, :integration_branch_commit, :boolean, {:default=>false})
   -> 0.0029s
==  AddIntegrationBranchCommitToGoCommits: migrated (0.0030s) =================

==  RemoveRowIntegratedBranchBuildToggleFromSettings: migrating ===============
==  RemoveRowIntegratedBranchBuildToggleFromSettings: migrated (0.0044s) ======

==  RemoveUniqIndexOnGoPipelinesProjectIdAndUrl: migrating ====================
-- remove_index(:go_pipelines, [:project_id, :url])
   -> 0.0021s
==  RemoveUniqIndexOnGoPipelinesProjectIdAndUrl: migrated (0.0022s) ===========

==  RemoveUniqIndexOnGoStagesPipelineIdAndUrl: migrating ======================
-- remove_index(:go_stages, [:pipeline_id, :url])
   -> 0.0016s
==  RemoveUniqIndexOnGoStagesPipelineIdAndUrl: migrated (0.0017s) =============

==  AddIntegrationBranchNameToBuildRequests: migrating ========================
-- add_column(:build_requests, :integration_branch_name, :string)
   -> 0.0004s
==  AddIntegrationBranchNameToBuildRequests: migrated (0.0005s) ===============

==  AddIndexOnStageIdToBuildRequests: migrating ===============================
-- add_index(:build_requests, [:stage_id])
   -> 0.0017s
==  AddIndexOnStageIdToBuildRequests: migrated (0.0018s) ======================

==  CreateBuildPlanStageArtifacts: migrating ==================================
-- create_table(:build_plan_stage_artifacts)
   -> 0.0023s
-- add_index(:build_plan_stage_artifacts, [:stage_id])
   -> 0.0016s
==  CreateBuildPlanStageArtifacts: migrated (0.0039s) =========================

==  MigrateArtifactsForExisitingProjects: migrating ===========================
-- rename_column(:build_plan_stages, :artifact_directories, :x_artifact_directories)
   -> 0.0003s
==  MigrateArtifactsForExisitingProjects: migrated (0.0011s) ==================

==  AddPropagateToBuildPlanArtifacts: migrating ===============================
-- add_column(:build_plan_stage_artifacts, :propagate, :boolean, {:default=>true})
   -> 0.0023s
==  AddPropagateToBuildPlanArtifacts: migrated (0.0024s) ======================

==  AddUniqueIndexToKeyInSettings: migrating ==================================
-- add_index(:settings, [:key], {:unique=>true})
   -> 0.0016s
==  AddUniqueIndexToKeyInSettings: migrated (0.0017s) =========================

==  SplitRubyVersionIntoLanguageAndVersionForBuildPlans: migrating ============
-- add_column(:build_plans, :language_name, :string)
   -> 0.0004s
-- add_column(:build_plans, :language_version, :string)
   -> 0.0003s
-- rename_column(:build_plans, :ruby_version, :x_ruby_version)
   -> 0.0003s
-- execute("UPDATE build_plans SET language_name='ruby'")
   -> 0.0003s
-- execute("UPDATE build_plans SET language_version=x_ruby_version")
   -> 0.0002s
==  SplitRubyVersionIntoLanguageAndVersionForBuildPlans: migrated (0.0017s) ===

==  CreateBuildPlanLanguages: migrating =======================================
-- create_table(:build_plan_languages)
   -> 0.0030s
==  CreateBuildPlanLanguages: migrated (0.0030s) ==============================

==  MoveColumnsFromBuildPlansToLanguages: migrating ===========================
-- rename_column(:build_plans, :language_name, :x_language_name)
   -> 0.0003s
-- rename_column(:build_plans, :language_version, :x_language_version)
   -> 0.0003s
==  MoveColumnsFromBuildPlansToLanguages: migrated (0.0033s) ==================

==  IncreasePrecisionOfBuildStatisticsAverageQueueTime: migrating =============
-- change_column(:build_statistics, :average_queue_time, :decimal, {:precision=>20, :scale=>3})
   -> 0.0020s
==  IncreasePrecisionOfBuildStatisticsAverageQueueTime: migrated (0.0020s) ====

==  AddNameToUsers: migrating =================================================
-- add_column(:users, :name, :string)
   -> 0.0004s
-- execute("UPDATE users SET name=login_name")
   -> 0.0002s
==  AddNameToUsers: migrated (0.0008s) ========================================

==  AddBuildStateToBuildRequests: migrating ===================================
-- add_column(:build_requests, :build_state, :string)
   -> 0.0004s
-- execute("UPDATE build_requests set build_state='pending'")
   -> 0.0003s
-- change_column(:build_requests, :build_state, :string, {:null=>false, :default=>"pending"})
   -> 0.0011s
==  AddBuildStateToBuildRequests: migrated (0.0020s) ==========================

==  RemoveWebHookIdFromBuildRequests: migrating ===============================
-- rename_column(:build_requests, :web_hook_id, :x_web_hook_id)
   -> 0.0003s
==  RemoveWebHookIdFromBuildRequests: migrated (0.0031s) ======================

==  DropScheduledColumnFromBuildRequests: migrating ===========================
-- rename_column(:build_requests, :scheduled, :x_scheduled)
   -> 0.0003s
==  DropScheduledColumnFromBuildRequests: migrated (0.0004s) ==================

==  DropPipelineEndedFromProjects: migrating ==================================
-- rename_column(:projects, :pipeline_ended, :x_pipeline_ended)
   -> 0.0003s
==  DropPipelineEndedFromProjects: migrated (0.0004s) =========================

==  DeprecateBuildingColumnInProjects: migrating ==============================
-- rename_column(:projects, :building, :x_building)
   -> 0.0003s
==  DeprecateBuildingColumnInProjects: migrated (0.0004s) =====================

==  DropPrefetchingFromProjects: migrating ====================================
-- rename_column(:projects, :prefetching, :x_prefetching)
   -> 0.0003s
==  DropPrefetchingFromProjects: migrated (0.0004s) ===========================

==  DropProvisionedFromProjects: migrating ====================================
-- rename_column(:projects, :provisioned, :x_provisioned)
   -> 0.0003s
==  DropProvisionedFromProjects: migrated (0.0004s) ===========================

==  DropArtifactsUriFromGoJobs: migrating =====================================
-- rename_column(:go_jobs, :artifacts_uri, :x_artifacts_uri)
   -> 0.0003s
==  DropArtifactsUriFromGoJobs: migrated (0.0004s) ============================

==  AddApiKeyToProjects: migrating ============================================
-- add_column(:projects, :api_token, :string)
   -> 0.0004s
-- change_column(:projects, :api_token, :string, {:null=>false})
   -> 0.0006s
==  AddApiKeyToProjects: migrated (0.0036s) ===================================

==  AddUserIdToHerokuCredentials: migrating ===================================
-- add_column(:heroku_credentials, :user_id, :integer)
   -> 0.0003s
==  AddUserIdToHerokuCredentials: migrated (0.0004s) ==========================

==  SwitchBuildPlanHerokuCredentialsAssociation: migrating ====================
-- add_column(:build_plans, :heroku_credentials_id, :integer)
   -> 0.0005s
-- change_column(:heroku_credentials, :build_plan_id, :integer, {:null=>true})
   -> 0.0006s
-- rename_column(:heroku_credentials, :build_plan_id, :x_build_plan_id)
   -> 0.0003s
==  SwitchBuildPlanHerokuCredentialsAssociation: migrated (0.0038s) ===========

==  AddAccessTokenRefreshTokenToHerokuCredentials: migrating ==================
-- add_column(:heroku_credentials, :access_token, :string)
   -> 0.0004s
-- add_column(:heroku_credentials, :refresh_token, :string)
   -> 0.0003s
-- add_column(:heroku_credentials, :expires_at, :datetime)
   -> 0.0003s
==  AddAccessTokenRefreshTokenToHerokuCredentials: migrated (0.0011s) =========

==  AddNotNullConstraintOnEmailToHerokuCredentials: migrating =================
-- change_column(:heroku_credentials, :email, :string, {:null=>false})
   -> 0.0006s
==  AddNotNullConstraintOnEmailToHerokuCredentials: migrated (0.0007s) ========

==  AssociateExistingHerokuCredentialsWithUser: migrating =====================
==  AssociateExistingHerokuCredentialsWithUser: migrated (0.0035s) ============

==  AddDropBuildToBuildRequests: migrating ====================================
-- add_column(:build_requests, :drop_build, :boolean, {:default=>false})
   -> 0.0037s
-- execute("UPDATE build_requests SET drop_build='f'")
   -> 0.0003s
-- change_column(:build_requests, :drop_build, :boolean, {:default=>false, :null=>false})
   -> 0.0013s
==  AddDropBuildToBuildRequests: migrated (0.0066s) ===========================

==  AddPartOfIntegrationBuildToBuildPlanStages: migrating =====================
-- add_column(:build_plan_stages, :part_of_integration_build, :boolean, {:default=>false})
   -> 0.0043s
-- execute("UPDATE build_plan_stages SET part_of_integration_build='f'")
   -> 0.0003s
-- change_column(:build_plan_stages, :part_of_integration_build, :boolean, {:default=>false, :null=>false})
   -> 0.0013s
==  AddPartOfIntegrationBuildToBuildPlanStages: migrated (0.0071s) ============

==  AddUserIdToBuildRequests: migrating =======================================
-- add_column(:build_requests, :user_id, :integer)
   -> 0.0004s
==  AddUserIdToBuildRequests: migrated (0.0006s) ==============================

==  CreateBabysitters: migrating ==============================================
-- create_table(:babysitters)
   -> 0.0022s
==  CreateBabysitters: migrated (0.0025s) =====================================

==  DeprecateNewContainerNodesTable: migrating ================================
-- rename_table(:container_nodes, :y_container_nodes)
   -> 0.0017s
==  DeprecateNewContainerNodesTable: migrated (0.0019s) =======================

==  CleanupDeprecatedTables20130821: migrating ================================
-- drop_table(:x_container_nodes)
   -> 0.0009s
-- drop_table(:y_container_nodes)
   -> 0.0006s
-- drop_table(:x_project_ecosystems)
   -> 0.0008s
-- remove_column(:build_plan_stages, :x_artifact_directories)
   -> 0.0004s
-- remove_column(:build_plans, :x_run_list)
   -> 0.0003s
-- remove_column(:build_plans, :x_ruby_version)
   -> 0.0003s
-- remove_column(:build_plans, :x_language_name)
   -> 0.0003s
-- remove_column(:build_plans, :x_language_version)
   -> 0.0003s
-- remove_column(:build_requests, :x_web_hook_id)
   -> 0.0003s
-- remove_column(:build_requests, :x_scheduled)
   -> 0.0004s
-- remove_column(:go_jobs, :x_artifacts_uri)
   -> 0.0004s
-- remove_column(:heroku_credentials, :x_build_plan_id)
   -> 0.0003s
-- remove_column(:projects, :x_provisioned)
   -> 0.0004s
-- remove_column(:projects, :x_building)
   -> 0.0003s
-- remove_column(:projects, :x_pipeline_ended)
   -> 0.0004s
-- remove_column(:projects, :x_prefetching)
   -> 0.0004s
==  CleanupDeprecatedTables20130821: migrated (0.0122s) =======================

==  CopyRoomFieldFromHipchatCredentialsToHipchatNotifications: migrating ======
==  CopyRoomFieldFromHipchatCredentialsToHipchatNotifications: migrated (0.0029s) 

==  DeprecateUnusedColumnsFromHipchat: migrating ==============================
-- rename_column(:hipchat_credentials, :room, :x_room)
   -> 0.0003s
-- change_column(:hipchat_credentials, :x_room, :string, {:null=>true})
   -> 0.0006s
-- rename_column(:hipchat_notifications, :username, :x_username)
   -> 0.0003s
==  DeprecateUnusedColumnsFromHipchat: migrated (0.0023s) =====================

==  AddNotNullRoomConstraintToHipchatNotifications: migrating =================
-- change_column(:hipchat_notifications, :room, :string, {:null=>false})
   -> 0.0006s
==  AddNotNullRoomConstraintToHipchatNotifications: migrated (0.0010s) ========

==  CopyRoomFieldFromCampfireCredentialsToCampfireNotifications: migrating ====
==  CopyRoomFieldFromCampfireCredentialsToCampfireNotifications: migrated (0.0029s) 

==  DeprecateUnusedColumnsFromCampfire: migrating =============================
-- rename_column(:campfire_credentials, :room, :x_room)
   -> 0.0003s
-- change_column(:campfire_credentials, :x_room, :string, {:null=>true})
   -> 0.0006s
==  DeprecateUnusedColumnsFromCampfire: migrated (0.0017s) ====================

==  AddNotNullRoomConstraintToCampfireNotifications: migrating ================
-- change_column(:campfire_notifications, :room, :string, {:null=>false})
   -> 0.0006s
==  AddNotNullRoomConstraintToCampfireNotifications: migrated (0.0010s) =======

==  RenameNotificationsToNotificationChannels: migrating ======================
-- rename_table(:hipchat_notifications, :hipchat_notification_channels)
   -> 0.0017s
-- rename_table(:campfire_notifications, :campfire_notification_channels)
   -> 0.0015s
==  RenameNotificationsToNotificationChannels: migrated (0.0039s) =============

==  DropHerokuOauthToggleFromSettings: migrating ==============================
==  DropHerokuOauthToggleFromSettings: migrated (0.0021s) =====================

==  AddAutoTrackBranchesToProjects: migrating =================================
-- add_column(:projects, :auto_track_branches, :boolean, {:default=>false})
   -> 0.0040s
==  AddAutoTrackBranchesToProjects: migrated (0.0041s) ========================

==  CreateGithubRepositories: migrating =======================================
-- create_table(:github_repositories)
   -> 0.0032s
==  CreateGithubRepositories: migrated (0.0033s) ==============================

==  AssociateBuildPlanWithGithubRepository: migrating =========================
-- add_column(:build_plans, :github_repository_id, :integer)
   -> 0.0004s
-- change_column(:github_repositories, :owner_type, :string, {:null=>false})
   -> 0.0006s
-- change_column(:github_repositories, :owner_name, :string, {:null=>false})
   -> 0.0005s
-- change_column(:github_repositories, :name, :string, {:null=>false})
   -> 0.0005s
-- change_column(:git_materials, :repository_owner_name, :string, {:null=>true})
   -> 0.0006s
-- change_column(:git_materials, :repository_owner_type, :string, {:null=>true})
   -> 0.0005s
-- change_column(:git_materials, :repository_name, :string, {:null=>true})
   -> 0.0005s
-- rename_column(:git_materials, :repository_owner_name, :x_repository_owner_name)
   -> 0.0003s
-- rename_column(:git_materials, :repository_owner_type, :x_repository_owner_type)
   -> 0.0003s
-- rename_column(:git_materials, :repository_name, :x_repository_name)
   -> 0.0003s
==  AssociateBuildPlanWithGithubRepository: migrated (0.0075s) ================

==  MoveDeployKeyAndWebHookToGithubRepository: migrating ======================
-- add_column(:deploy_keys, :github_repository_id, :integer)
   -> 0.0004s
-- add_column(:web_hooks, :github_repository_id, :integer)
   -> 0.0003s
-- rename_column(:deploy_keys, :project_id, :x_project_id)
   -> 0.0003s
-- rename_column(:web_hooks, :project_id, :x_project_id)
   -> 0.0003s
==  MoveDeployKeyAndWebHookToGithubRepository: migrated (0.0090s) =============

==  MoveAutoTrackBranchesFromProjectsToGithubRepositories: migrating ==========
-- add_column(:github_repositories, :auto_track_branches, :boolean, {:default=>false})
   -> 0.0031s
-- rename_column(:projects, :auto_track_branches, :x_auto_track_branches)
   -> 0.0003s
==  MoveAutoTrackBranchesFromProjectsToGithubRepositories: migrated (0.0068s) =

==  AddAutoTrackBranchPrefixToGithubRepository: migrating =====================
-- add_column(:github_repositories, :auto_track_branch_prefix, :string)
   -> 0.0004s
==  AddAutoTrackBranchPrefixToGithubRepository: migrated (0.0005s) ============

==  ChangeValueToTextForBuildPlanEnvironmentVariables: migrating ==============
-- change_column(:build_plan_environment_variables, :value, :text)
   -> 0.0004s
==  ChangeValueToTextForBuildPlanEnvironmentVariables: migrated (0.0005s) =====

==  AddMasterToProjects: migrating ============================================
-- add_column(:projects, :master, :boolean, {:default=>false})
   -> 0.0041s
==  AddMasterToProjects: migrated (0.0043s) ===================================

==  MarkOldestProjectAsMaster: migrating ======================================
==  MarkOldestProjectAsMaster: migrated (0.0030s) =============================

==  AddAutoIntegrateBranchesToGithubRepository: migrating =====================
-- add_column(:github_repositories, :auto_integrate_branches, :boolean, {:default=>false})
   -> 0.0029s
==  AddAutoIntegrateBranchesToGithubRepository: migrated (0.0033s) ============

==  AddPausedByUserAndPauseReasonToProject: migrating =========================
-- add_column(:projects, :paused_by_id, :integer)
   -> 0.0004s
-- add_column(:projects, :pause_reason, :string)
   -> 0.0004s
==  AddPausedByUserAndPauseReasonToProject: migrated (0.0015s) ================

==  AddReceiveEmailsToUser: migrating =========================================
-- add_column(:users, :receive_email, :boolean, {:default=>true})
   -> 0.0027s
==  AddReceiveEmailsToUser: migrated (0.0030s) ================================

==  AddPipelineConfigToGoPipelines: migrating =================================
-- add_column(:go_pipelines, :pipeline_config, :text)
   -> 0.0004s
==  AddPipelineConfigToGoPipelines: migrated (0.0006s) ========================

==  AddRunWithGnocciToProjects: migrating =====================================
-- add_column(:projects, :run_with_gnocci, :boolean, {:default=>false})
   -> 0.0038s
==  AddRunWithGnocciToProjects: migrated (0.0042s) ============================

==  ChangeStageTypeColumnForHerokuDeployments: migrating ======================
==  ChangeStageTypeColumnForHerokuDeployments: migrated (0.0026s) =============

==  AddCreatedByAndProjectIdToBuildPlans: migrating ===========================
-- add_column(:build_plans, :created_by_id, :integer)
   -> 0.0004s
-- add_column(:build_plans, :project_id, :integer)
   -> 0.0003s
==  AddCreatedByAndProjectIdToBuildPlans: migrated (0.0013s) ==================

==  DeprecateOwnerIdAndOwnerTypeOnBuildPlans: migrating =======================
-- change_column(:build_plans, :owner_id, :integer, {:null=>true})
   -> 0.0006s
-- change_column(:build_plans, :owner_type, :string, {:null=>true})
   -> 0.0005s
-- rename_column(:build_plans, :owner_id, :x_owner_id)
   -> 0.0003s
-- rename_column(:build_plans, :owner_type, :x_owner_type)
   -> 0.0003s
==  DeprecateOwnerIdAndOwnerTypeOnBuildPlans: migrated (0.0032s) ==============

==  MigratedOwnerDataToProjectAndCreatedBy: migrating =========================
==  MigratedOwnerDataToProjectAndCreatedBy: migrated (0.0021s) ================

==  AddAutoIntegrateBranchNameToGithubRepositories: migrating =================
-- add_column(:github_repositories, :auto_integrate_branch_name, :string)
   -> 0.0004s
==  AddAutoIntegrateBranchNameToGithubRepositories: migrated (0.0005s) ========

==  AddGodToAuthorizedUsers: migrating ========================================
-- add_column(:authorized_users, :god, :boolean, {:default=>false})
   -> 0.0045s
==  AddGodToAuthorizedUsers: migrated (0.0047s) ===============================

==  AddGnocciToBabysitters: migrating =========================================
-- add_column(:babysitters, :gnocci, :boolean, {:default=>false})
   -> 0.0021s
==  AddGnocciToBabysitters: migrated (0.0025s) ================================

==  RemoveAutoIntegrateBranchesFromGithubRepositories: migrating ==============
-- remove_column(:github_repositories, :auto_integrate_branches)
   -> 0.0005s
==  RemoveAutoIntegrateBranchesFromGithubRepositories: migrated (0.0009s) =====

==  RenameDeploymentTriggerToManualTrigger: migrating =========================
==  RenameDeploymentTriggerToManualTrigger: migrated (0.0023s) ================

==  CullingOfOctober2013: migrating ===========================================
-- remove_column(:build_plans, :x_owner_id)
   -> 0.0004s
-- remove_column(:build_plans, :x_owner_type)
   -> 0.0003s
-- remove_column(:campfire_credentials, :x_room)
   -> 0.0003s
-- remove_column(:deploy_keys, :x_project_id)
   -> 0.0003s
-- remove_column(:git_materials, :x_repository_owner_name)
   -> 0.0003s
-- remove_column(:git_materials, :x_repository_owner_type)
   -> 0.0003s
-- remove_column(:git_materials, :x_repository_name)
   -> 0.0009s
-- remove_column(:hipchat_credentials, :x_room)
   -> 0.0003s
-- remove_column(:hipchat_notification_channels, :x_username)
   -> 0.0004s
-- remove_column(:projects, :x_auto_track_branches)
   -> 0.0005s
-- remove_column(:web_hooks, :x_project_id)
   -> 0.0003s
==  CullingOfOctober2013: migrated (0.0048s) ==================================

==  AddUniquenessConstraintsToGithubRepositories: migrating ===================
-- add_index(:github_repositories, [:owner_type, :owner_name, :name], {:unique=>true})
   -> 0.0022s
==  AddUniquenessConstraintsToGithubRepositories: migrated (0.0024s) ==========

==  AddCancelledByUserToGoStages: migrating ===================================
-- add_column(:go_stages, :cancelled_by_user, :boolean, {:default=>false})
   -> 0.0034s
==  AddCancelledByUserToGoStages: migrated (0.0038s) ==========================

==  ChangeUniqueIndexOnGithubRepositories: migrating ==========================
-- remove_index(:github_repositories, [:owner_type, :owner_name, :name])
   -> 0.0014s
-- add_index(:github_repositories, [:owner_name, :name], {:unique=>true})
   -> 0.0017s
==  ChangeUniqueIndexOnGithubRepositories: migrated (0.0040s) =================

==  AddCommitTimeToBuildRequest: migrating ====================================
-- add_column(:build_requests, :commit_time, :datetime)
   -> 0.0004s
==  AddCommitTimeToBuildRequest: migrated (0.0008s) ===========================

==  CreateUserPreferences: migrating ==========================================
-- create_table(:user_preferences)
   -> 0.0022s
==  CreateUserPreferences: migrated (0.0026s) =================================

==  AddUbuntuSupportToBabysitters: migrating ==================================
-- rename_column(:babysitters, :container_id, :centos_container_id)
   -> 0.0003s
-- add_column(:babysitters, :ubuntu_container_id, :integer)
   -> 0.0003s
-- add_column(:babysitters, :reserved_container_id, :integer)
   -> 0.0003s
-- add_column(:build_plans, :container_os, :string)
   -> 0.0003s
-- change_column(:build_plans, :container_os, :string, {:default=>"CentOS", :null=>false})
   -> 0.0011s
==  AddUbuntuSupportToBabysitters: migrated (0.0039s) =========================

==  RunAllProjectsOnGnocci: migrating =========================================
==  RunAllProjectsOnGnocci: migrated (0.0027s) ================================

==  ConvertGoXmlToGnocciConfForGoPipelines: migrating =========================
-- add_column(:go_pipelines, :gnocci_config, :text)
   -> 0.0005s
-- rename_column(:go_pipelines, :pipeline_config, :go_config)
   -> 0.0003s
==  ConvertGoXmlToGnocciConfForGoPipelines: migrated (0.0047s) ================

==  RemoveGnocciFromBabysitters: migrating ====================================
-- rename_column(:babysitters, :gnocci, :x_gnocci)
   -> 0.0003s
==  RemoveGnocciFromBabysitters: migrated (0.0007s) ===========================

==  RemoveRunWithGnocciFromProjects: migrating ================================
-- rename_column(:projects, :run_with_gnocci, :x_run_with_gnocci)
   -> 0.0004s
==  RemoveRunWithGnocciFromProjects: migrated (0.0007s) =======================

==  CreateTableMessages: migrating ============================================
-- create_table(:messages)
   -> 0.0022s
==  CreateTableMessages: migrated (0.0025s) ===================================

==  RemoveLatestAtomEntryIdAndLatestIntegrationAtomEntryIdFromProjects: migrating 
-- rename_column(:projects, :latest_atom_entry_id, :x_latest_atom_entry_id)
   -> 0.0003s
-- rename_column(:projects, :latest_integration_atom_entry_id, :x_latest_integration_atom_entry_id)
   -> 0.0003s
==  RemoveLatestAtomEntryIdAndLatestIntegrationAtomEntryIdFromProjects: migrated (0.0014s) 

==  DropDestAndZipUrlFromGoArtifacts: migrating ===============================
-- rename_column(:go_artifacts, :dest, :x_dest)
   -> 0.0003s
-- rename_column(:go_artifacts, :zip_url, :x_zip_url)
   -> 0.0003s
==  DropDestAndZipUrlFromGoArtifacts: migrated (0.0013s) ======================

==  RenameSrcToNameForGoArtifacts: migrating ==================================
-- rename_column(:go_artifacts, :src, :name)
   -> 0.0003s
==  RenameSrcToNameForGoArtifacts: migrated (0.0007s) =========================

==  AddCaseInsensitiveIndexOnUsersLoginName: migrating ========================
-- execute("CREATE UNIQUE INDEX index_users_on_lower_login_name_index ON users (lower(login_name))")
   -> 0.0012s
==  AddCaseInsensitiveIndexOnUsersLoginName: migrated (0.0012s) ===============

==  PurgePostCommitNotifications: migrating ===================================
==  PurgePostCommitNotifications: migrated (0.0024s) ==========================

==  PurgeOrphanedStages: migrating ============================================
==  PurgeOrphanedStages: migrated (0.0042s) ===================================

==  AddCaseInsensitiveIndexOnAuthorizedUsersGithubUsername: migrating =========
-- execute("CREATE UNIQUE INDEX index_authorized_users_on_lower_github_username_index ON authorized_users (lower(github_username))")
   -> 0.0014s
==  AddCaseInsensitiveIndexOnAuthorizedUsersGithubUsername: migrated (0.0014s) 

==  AddGithubIdToUsers: migrating =============================================
-- add_column(:users, :github_id, :string)
   -> 0.0004s
==  AddGithubIdToUsers: migrated (0.0005s) ====================================

==  RemoveAutoTrackBranchesIntegratedBranchBuildAndJavaEnabledKeysFromApplicationSettings: migrating 
==  RemoveAutoTrackBranchesIntegratedBranchBuildAndJavaEnabledKeysFromApplicationSettings: migrated (0.0028s) 

==  AddTemplateBuildPlanIdToGithubRepositories: migrating =====================
-- add_column(:github_repositories, :template_build_plan_id, :integer)
   -> 0.0004s
==  AddTemplateBuildPlanIdToGithubRepositories: migrated (0.0004s) ============

==  CullingOfNovember2013: migrating ==========================================
-- remove_column(:babysitters, :x_gnocci)
   -> 0.0004s
-- remove_column(:go_artifacts, :x_dest)
   -> 0.0003s
-- remove_column(:go_artifacts, :x_zip_url)
   -> 0.0003s
-- remove_column(:projects, :x_latest_atom_entry_id)
   -> 0.0004s
-- remove_column(:projects, :x_latest_integration_atom_entry_id)
   -> 0.0004s
-- remove_column(:projects, :x_run_with_gnocci)
   -> 0.0004s
==  CullingOfNovember2013: migrated (0.0024s) =================================

==  RemoveTemplateBuildPlanIdFromGithubRepositories: migrating ================
-- remove_column(:github_repositories, :template_build_plan_id)
   -> 0.0004s
==  RemoveTemplateBuildPlanIdFromGithubRepositories: migrated (0.0004s) =======

==  ChangeProjectOwnerIdToCreatedById: migrating ==============================
-- rename_column(:projects, :owner_id, :created_by_id)
   -> 0.0004s
==  ChangeProjectOwnerIdToCreatedById: migrated (0.0004s) =====================

==  CopyCounterForIntegrationPipelinesFromDefaultPipeline: migrating ==========
==  CopyCounterForIntegrationPipelinesFromDefaultPipeline: migrated (0.0026s) =

==  AddBillingOwnerToGithubRepositories: migrating ============================
-- add_column(:github_repositories, :billing_owner_id, :integer)
   -> 0.0004s
-- change_column(:github_repositories, :billing_owner_id, :integer, {:null=>false})
   -> 0.0006s
==  AddBillingOwnerToGithubRepositories: migrated (0.0033s) ===================

==  AddTypeToBuildPlans: migrating ============================================
-- add_column(:build_plans, :type, :string)
   -> 0.0004s
-- execute("UPDATE build_plans SET type='ProjectBuildPlan'")
   -> 0.0003s
-- change_column(:build_plans, :type, :string, {:null=>false})
   -> 0.0006s
==  AddTypeToBuildPlans: migrated (0.0014s) ===================================

==  DeprecrateCreatedByFromBuildPlans: migrating ==============================
-- rename_column(:build_plans, :created_by_id, :x_created_by_id)
   -> 0.0003s
==  DeprecrateCreatedByFromBuildPlans: migrated (0.0004s) =====================

==  CopyGithubRepositoryIdFromBuildPlansToProjects: migrating =================
-- add_column(:projects, :github_repository_id, :integer)
   -> 0.0004s
-- change_column(:projects, :github_repository_id, :integer, {:null=>false})
   -> 0.0006s
==  CopyGithubRepositoryIdFromBuildPlansToProjects: migrated (0.0039s) ========

==  InverseAssociationBetweenProjectAndBuildPlan: migrating ===================
-- add_column(:projects, :build_plan_id, :integer)
   -> 0.0004s
-- change_column(:projects, :build_plan_id, :integer, {:null=>false})
   -> 0.0006s
-- rename_column(:build_plans, :project_id, :x_project_id)
   -> 0.0003s
==  InverseAssociationBetweenProjectAndBuildPlan: migrated (0.0262s) ==========

==  AddHaltedToGithubRepositories: migrating ==================================
-- add_column(:github_repositories, :halted, :boolean, {:default=>false})
   -> 0.0035s
==  AddHaltedToGithubRepositories: migrated (0.0036s) =========================

==  AddUniquenessConstraintOnGithubRepositoryIdForBuildPlans: migrating =======
-- add_index(:build_plans, [:github_repository_id], {:uniqueness=>true})
   -> 0.0018s
==  AddUniquenessConstraintOnGithubRepositoryIdForBuildPlans: migrated (0.0018s) 

==  DeprecateRepositoryUrlFromProjects: migrating =============================
-- rename_column(:projects, :repository_url, :x_repository_url)
   -> 0.0003s
-- change_column(:projects, :x_repository_url, :string, {:null=>true})
   -> 0.0006s
==  DeprecateRepositoryUrlFromProjects: migrated (0.0010s) ====================

==  AddCollaborationsToGithubRepositories: migrating ==========================
-- add_column(:collaborations, :github_repository_id, :integer)
   -> 0.0004s
==  AddCollaborationsToGithubRepositories: migrated (0.0005s) =================

==  MigrateCollaborationsFromProjectToGithubRepository: migrating =============
-- rename_column(:collaborations, :project_id, :x_project_id)
   -> 0.0003s
-- change_column(:collaborations, :github_repository_id, :integer, {:null=>false})
   -> 0.0005s
-- add_index(:collaborations, [:github_repository_id, :user_id], {:unique=>true})
   -> 0.0018s
==  MigrateCollaborationsFromProjectToGithubRepository: migrated (0.0093s) ====

==  AddAdminFlagToCollaborations: migrating ===================================
-- add_column(:collaborations, :admin, :boolean, {:default=>false})
   -> 0.0025s
==  AddAdminFlagToCollaborations: migrated (0.0058s) ==========================

==  CreateBuildAllowances: migrating ==========================================
-- create_table(:build_allowances)
   -> 0.0024s
-- add_index(:build_allowances, :user_id, {:unique=>true})
   -> 0.0015s
==  CreateBuildAllowances: migrated (0.0040s) =================================

==  CreateBuildAllowanceForUsersWithProjects: migrating =======================
==  CreateBuildAllowanceForUsersWithProjects: migrated (0.0032s) ==============

==  CreateTransientGithubRepositories: migrating ==============================
-- create_table(:transient_github_repositories)
   -> 0.0030s
==  CreateTransientGithubRepositories: migrated (0.0030s) =====================

==  DeprecateBuildPlanCapacityFromUsers: migrating ============================
-- rename_column(:users, :build_plan_capacity, :x_build_plan_capacity)
   -> 0.0003s
==  DeprecateBuildPlanCapacityFromUsers: migrated (0.0004s) ===================

==  CreateTransientGithubRepositoriesForExistingTemplateBuildPlans: migrating =
==  CreateTransientGithubRepositoriesForExistingTemplateBuildPlans: migrated (0.0021s) 

==  AddActivatedFlagToBuildAllowances: migrating ==============================
-- add_column(:build_allowances, :activated, :boolean, {:default=>false})
   -> 0.0024s
==  AddActivatedFlagToBuildAllowances: migrated (0.0025s) =====================

==  CreateBuildAllowanceForUsersThatDoNotHaveOne: migrating ===================
==  CreateBuildAllowanceForUsersThatDoNotHaveOne: migrated (0.0020s) ==========

==  ActivateBuildAllowancesOfBillingOwners: migrating =========================
==  ActivateBuildAllowancesOfBillingOwners: migrated (0.0006s) ================

==  CreatePlans: migrating ====================================================
-- create_table(:plans)
   -> 0.0031s
==  CreatePlans: migrated (0.0162s) ===========================================

==  CreateSubscriptionSyncs: migrating ========================================
-- create_table(:subscription_sync)
   -> 0.0023s
==  CreateSubscriptionSyncs: migrated (0.0024s) ===============================

==  RenameSubscriptionSyncsToSubscriptionSyncLog: migrating ===================
-- rename_table(:subscription_sync, :subscription_sync_log)
   -> 0.0018s
==  RenameSubscriptionSyncsToSubscriptionSyncLog: migrated (0.0018s) ==========

==  CreateSubscriptionSyncLogEntry: migrating =================================
==  CreateSubscriptionSyncLogEntry: migrated (0.0086s) ========================

==  AddPlanIdToBuildAllowances: migrating =====================================
-- add_column(:build_allowances, :plan_id, :integer)
   -> 0.0005s
==  AddPlanIdToBuildAllowances: migrated (0.0008s) ============================

==  CreateTrialPlan: migrating ================================================
==  CreateTrialPlan: migrated (0.0099s) =======================================

==  MigrateAllBuildAllowancesToTrialPlans: migrating ==========================
==  MigrateAllBuildAllowancesToTrialPlans: migrated (0.0107s) =================

==  DropRepoCountAndParallelBuildCountInBuildAllowances: migrating ============
-- remove_column(:build_allowances, :repository_count)
   -> 0.0004s
-- remove_column(:build_allowances, :parallel_build_count)
   -> 0.0003s
==  DropRepoCountAndParallelBuildCountInBuildAllowances: migrated (0.0014s) ===

==  MakePlanIdNotNullableonBuildAllowances: migrating =========================
-- change_column(:build_allowances, :plan_id, :integer, {:null=>false})
   -> 0.0006s
==  MakePlanIdNotNullableonBuildAllowances: migrated (0.0010s) ================

==  AddStripeSubscriptionActiveToBuildAllowances: migrating ===================
-- add_column(:build_allowances, :stripe_subscription_active, :boolean, {:default=>false})
   -> 0.0027s
==  AddStripeSubscriptionActiveToBuildAllowances: migrated (0.0031s) ==========

==  ResurrectRepoCountAndParallelBuildCountOnBuildAllowances: migrating =======
-- add_column(:build_allowances, :repository_count, :integer)
   -> 0.0004s
-- add_column(:build_allowances, :parallel_build_count, :integer)
   -> 0.0003s
==  ResurrectRepoCountAndParallelBuildCountOnBuildAllowances: migrated (0.0014s) 

==  CreateRepoCountAndParallelBuildCountFromPlans: migrating ==================
==  CreateRepoCountAndParallelBuildCountFromPlans: migrated (0.0020s) =========

==  MakeParallelBuildCountAndRepositoryCountNotNullable: migrating ============
-- change_column(:build_allowances, :parallel_build_count, :integer, {:null=>false})
   -> 0.0006s
-- change_column(:build_allowances, :repository_count, :integer, {:null=>false})
   -> 0.0005s
==  MakeParallelBuildCountAndRepositoryCountNotNullable: migrated (0.0019s) ===

==  AddUserWhoTriggeredTheBuildToGoStages: migrating ==========================
-- add_column(:go_stages, :user_who_triggered_the_build, :string)
   -> 0.0004s
==  AddUserWhoTriggeredTheBuildToGoStages: migrated (0.0005s) =================

==  RemoveScheduleTimeFromPipeline: migrating =================================
-- rename_column(:go_pipelines, :schedule_time, :x_schedule_time)
   -> 0.0003s
==  RemoveScheduleTimeFromPipeline: migrated (0.0007s) ========================

==  AddStageIdToArtifacts: migrating ==========================================
-- add_column(:go_artifacts, :stage_id, :integer)
   -> 0.0004s
==  AddStageIdToArtifacts: migrated (0.0008s) =================================

==  FillStageIdInArtifacts: migrating =========================================
-- execute("      UPDATE go_artifacts\n      SET\n        stage_id = go_jobs.stage_id\n      FROM go_jobs JOIN go_artifacts ga ON go_jobs.id = ga.job_id\n")
   -> 0.0005s
==  FillStageIdInArtifacts: migrated (0.0006s) ================================

==  DeprecateJobIdInArtifacts: migrating ======================================
-- change_column(:go_artifacts, :job_id, :integer, {:null=>true})
   -> 0.0006s
-- rename_column(:go_artifacts, :job_id, :x_job_id)
   -> 0.0002s
==  DeprecateJobIdInArtifacts: migrated (0.0010s) =============================

==  AddJobFieldsToStage: migrating ============================================
-- add_column(:go_stages, :job_scheduled_at, :datetime)
   -> 0.0004s
-- add_column(:go_stages, :job_result, :string)
   -> 0.0003s
-- add_column(:go_stages, :job_name, :string)
   -> 0.0003s
-- add_column(:go_stages, :job_duration, :integer)
   -> 0.0003s
==  AddJobFieldsToStage: migrated (0.0015s) ===================================

==  CopyJobFieldsToStage: migrating ===========================================
-- execute("      UPDATE go_stages\n      SET\n        job_scheduled_at = go_jobs.scheduled,\n        job_name = go_jobs.name,\n        job_result = go_jobs.result,\n        job_duration = go_jobs.duration\n      FROM go_jobs JOIN go_stages gs ON go_jobs.stage_id = gs.id\n")
   -> 0.0005s
==  CopyJobFieldsToStage: migrated (0.0006s) ==================================

==  AddNotNullConstraintToResultInStage: migrating ============================
-- change_column(:go_stages, :job_result, :string, {:null=>false})
   -> 0.0006s
==  AddNotNullConstraintToResultInStage: migrated (0.0007s) ===================

==  DeprecateGoJobs: migrating ================================================
-- rename_table(:go_jobs, :x_go_jobs)
   -> 0.0016s
==  DeprecateGoJobs: migrated (0.0016s) =======================================

Command bundle exec rake db:drop db:create db:migrate db:test:prepare exited successfully with status 0. Took 10.14 seconds.

$ bundle exec rspec --format documentation spec/models spec/jobs spec/observers spec/caches spec/helpers spec/mailers spec/controllers spec/integration
No DRb server is running. Running in local process instead ...
Turning off log for tests

PipelineCache
  cache_key
    should depend on project_id & pipeline-label
  .invalidate
    regular build
      should invalidate the pipeline cache by touching it
    integrated build
      should invalidate cache of dependent pipeline by touching it
      should invalidate cache of tracking pipeline by touching it
  sweeper
    should call invalidate with the right params

Admin::AuthorizedUsersController
  it should behave like authorized_users_controller
    should not allow users who are not administrators
    should allow users who are administrators
    should not allow users who are not administrators
    should allow users who are administrators
    should not allow users who are not administrators
    should allow users who are administrators
  GET 'index'
    should show authorized users sorted by reverse order of createtion
  GET 'new'
    should show the add new authorized user form
  POST 'create'
    should create a new authorized user
    should set the created_by field
    should redirect to the authorized users page
    should set the right notice for non-admin users
    should set the right notice for admins
    should show error message if authorized user cannot be created
  DELETE 'destroy'
    should delete the right authorized user
    should show the right message
    should not allow you to delete yourself

Admin::BuildAllowancesController
  PUT 'update'
    should not allow regular users
    should allow updates by admin users

Admin::RegistrantsController
  GET 'index'
    authentication
      should not allow users without admin access
      should allow users with correct basic auth credentials
    behavior
      should show registrants
      should show if registrants have been invited with the invitation url
  POST 'invite'
    authentication
      should not allow users without basic auth
      should not allow users without correct basic auth credentials
      should allow users with correct basic auth credentials
    behavior
      should invite the right user
      should flash success message
  DELETE 'destroy'
    authentication
      should not allow users without basic auth
      should not allow users without correct basic auth credentials
      should allow users with correct basic auth credentials
    behavior
      should destroy the registrant
      should show success notification on deletion of the registrant

Admin::StatusController
  authentication
    should not allow users without admin access
    should allow users with correct basic auth credentials
  GET 'unreserve_babysitter_confirm'
    should render a js
  POST 'unreserve_babysitter'
    should release a given container
  GET 'show'
    behavior
      build_stats sql should not fail
      please_fixme sql should not fail
      baby sitters
        should show the total number of build requests
        should render a list of all babysitter nodes
        should render a list of projects building on baby sitter
        should render babysitter as 'idle' if the babysitter is not building
        should render a link to unreserve the babysitters which are reserved
      project status
        should render a list of all projects
        should tell if a project is paused
        should render the number of build requests for a given project
      features
        should create the send_admin_email setting when one doesn't exist
        should render send_admin_email
        should not be toggled on by default
        should be toggleable

Admin::TimesController
  should be ok (FAILED - 1)

Admin::UsersController
  should list all users
  should show build allowance form for all users

FooController
  Maintainance Mode Off
    should allow GET actions for non-xhr requests
    should allow GET actions for xhr requests
    should allow PUT actions for non-xhr requests
    should allow PUT actions for xhr requests
    should allow POST actions for non-xhr requests
    should allow POST actions for xhr requests
    should allow DELETE actions for non-xhr requests
    should allow DELETE actions for xhr requests
  Maintainance Mode On
    should show a banner on top indicating that snap is under maintenance
    should allow GET actions for non-xhr requests
    should allow GET actions for xhr requests
    should not allow PUT actions for non-xhr requests
    should not allow PUT actions for xhr requests
    should not allow POST actions for non-xhr requests
    should not allow POST actions for xhr requests
    should not allow DELETE actions for non-xhr requests
    should not allow DELETE actions for xhr requests

ApplicationSettingsController
  should toggle on the setting
  should toggle off the setting

ArtifactsController
  logs
    should render the log babysitter on show
    should tell if the stage is currently running
    should raise error if pipeline id is incorrect
    should raise error if stage id is incorrect
  artifacts
    should show no artifacts configured for stages without any artifacts
    should display all artifacts

AuthController
  GET/POST 'create'
    should redirect to the dashboard if the redirect_back_url is not present in the session
    should create heroku credentials if one do not exist for the user
    should update existing heroku credentials of the user
  GET/POST 'failure'
    should render the user to be unauthorized with the error message

BuildHistoryController
  should render a notice when project is paused
  should always show the pipeline group in the collapsed (default) state if the project isn't an integrated branch build
  should include only the default pipelines
  Authorization
    should display pipelines only to authorized user
    should not display dashboard unauthorized users
  header actions
    should render a rerun last pipeline link
    should render a pause link
    should render a resume link for paused projects
    halted projects
      should render a disabled rerun last pipeline link
      should render a disabled pause link
      should render a disabled resume link for paused projects
  Drop build
    should render correct metadata for pending pipeline
    should mark a pipeline to be dropped
    should mark a pipeline to be dropped
  Completed Pipeline information
    should render the correct markup
    should display the stage duration
    should display the time it was triggered at
    should display Unknown when the time it was triggered at is nil
    should display the login name of the person who triggered the stage for manual stages
    should display correct stage name
    should display artifact download link
    should render integration build related information for pipelines which were members of integration branch builds
    integrated branch build
      should show both the pipelines in a consolidated manner when both the pipelines have passed
  pagination
    should display first page of pipelines for a provisioned project
    should show all pipeline instances before a pipeline counter for a provisioned project when there are more pipeline instances than the default page size
    should show all pipeline instances before a pipeline counter when there are lesser pipeline instances than the default page size
    should show all pipeline instances after a pipeline counter when there are lesser pipeline instances than the default page size
  Ajax Refresh of new Pipeline Instances
    should render no new pipelines when there are no new pipelines
    should render top pipeline + 25 new pipelines (page size) = 26 pipelines when there are exactly 25 new available
    should render all available pipelines if their count is less than the default page size
    should render top pipeline + 24 = 25 (page size) pipelines after a given pipeline instance if there are a lot more new pipeline instances available
  build status update
    for non-integrated builds
      should provide latest build status for requested pipeline if pipeline is valid
      should provide nothing if pipeline is valid
      should render a pipeline group with a single pipeline instance in it for non-integrated branch builds
    integrated branch build
      should render a pipeline group with both(tracking as well as integrated) pipeline instance in it
      should show the tracking pipeline's counter only in the expanded state when the pipelines have completed
      should show the tracking pipeline's counter only in the collapsed state when the pipelines have completed
  cancel build
    should mark the stage for being cancelled and return ok when its gnocci build
  currently building pipeline
    should render completed stages as done
    should render cancelled stages as cancelled
    should render the running stage as running
    should render pending stages as pending
    should render stages that can be manually triggered
  error handling
    should display appropriate provisioning errors
  caching
    should cache content for pipeline once it gets rendered
  integrated builds
    should wrap the pipelines in a group
    should show the pipeline group in an expanded state if the integration pipeline has not passed
    should show the pipeline group in the collapsed (default) state if all pipelines including the integration pipeline have passed

BuildImageController
  should render unknown image if project has no pipeline history (new project)
  should render success image if last build has passed
  should render failed image if last build has failed
  should render unknown image if project has no history
  Security
    should not allow access if the api key does not match the project
    should allow access if the api key matches the project

BuildPlansController
  Build Plan Operations
    POST 'create'
      should create a new transient github repository with the supplied params
      should create a new build plan with the correct branch name and container os
    GET 'branches'
      should render the branches for the repo in the right format
    GET 'new_custom_stage'
      should render a dialog for adding a new custom stage
    GET 'new_heroku_deployment_stage'
      should render a dialog for adding a new heroku deployment stage
      should associate a heroku credential with the build plan if the user has one
      should show existing heroku credentials associated with the build plan if any
      should set run_db_migrate to true for rubygems and rails builds
      should set run_db_migrate to false for java builds
      should not render db migrate option for java builds
    GET 'show'
      should render the repository owner and name when the build plan is owned by a user
      should redirect to project settings page if plan is owned by project
      should show build plan for user if build plan is ready and there are more than 3 collaborators
      should show build plan for user if build plan is ready and there are 3 or less collaborators
      should not show build plan for user if build plan is not ready
      should show detection errors if build plan has errors
      should show the DATABASE_URL environment variable when the language is java and the build plan has a database selected
      should show the 'Why we configured the pipeline the way we did' message dialog when the user first sets up the build plan
      should not render the project scheduling paused banner when the build plan is not owned by a project
      should not show the edit link on HerokuDeployment stages when there is no heroku credentials associated with the build plan
      should show the edit link on HerokuDeployment stages when there is heroku credentials associated with the build plan
      should not show 'Heroku credentials missing' on HerokuDeployment stages when there is heroku credentials associated with the build plan
      should show 'Heroku credentials missing' on HerokuDeployment stages when there is no heroku credentials associated with the build plan
    PUT 'update'
      should allow updating the ruby version and database type
      should allow updating the branch
      should render a bad status code if build plan could not be updated
    GET 'ready'
      should render nothing for #ready if build plan has detection pending
      should js redirect to build plan show action when build plan is ready
      should delete build plan and js redirect to detection error page when detection fails because of git connection error
    POST 'switch_heroku_credentials'
      should switch to the current user's heroku credentials
      should render an error when the current user doesn't have any credentials
      should redirect to the build plan edit stage path
  Stage Operations
    POST 'append_stage'
      should create a heroku deployment stage
      should set run_db_migrate to false for java builds
      should not set run_db_migrate to false for rubygems or rails builds
      should create a custom stage and tasks associated with the build plan
      should accept nested attributes for environment variables
      should accept nested attributes for artifacts
      should not save a stage if stage validation fails
      should not display errors for job_name as the user does not have an option to specify it
      heroku credentials
        should create a new set of heroku credentials for the signed-in user
        should reuse the heroku credentials from the build plan if there is one
        should update the heroku credentials of the build_plan of the current project
    PUT 'reorder_stages'
      should reorder stages in the build plan specified by the :stage_order array param
      should render error when the first stage is a manual triggerable stage
      should render error when reordering fails
    DELETE "destroy"
      should destroy the build plan and clear the session key containing the collaborator message
      should not destroy the build plan if it is owned by a project
    DELETE "delete_stage"
      should not destroy the specified stage if the next stage is manual deploy
      should not destroy the stage if total stages == 1
      should destroy the specified stage in the build plan
    PUT 'update_stage'
      should update the custom stage if params are valid
      should accept nested attributes for environment variables
      should accept nested attributes for artifacts
      should not update the custom stage if all tasks will be destroyed
      should render error if custom stage could not be updated
      should update the heroku deployment if params are valid
      should render error if deployment could not be updated
  security
    should not show the build plan that not owned by logged in user
    should not show the build plan for a project on which the current user is not a collaborator
    should not show the edit stage for a project on which the current user is not a collaborator
    should not allow updates to a build plan not owned by a user
    should not allow updates to a stage for a project on which the current user is not a collaborator
    should not destroy the build plan that is not owned by logged in user
    should not answer ready for a build plan that is not owned by logged in user
    should not allow deletion of stages in a build plan that is not owned by logged in user
  GET 'heroku apps'
    should return the list of heroku apps
    should return not found if the build plan or the current user doesn't have any heroku credentials
    should use Heroku credentials of the current user if the build plan doesn't have any credentials yet (first time Heroku stage is created)

CampfireNotificationChannelsController
  create
    should add campfire notification to the project
    should use user's campfire credentials
    should not update someone else's project
  delete
    should delete campfire notification channel on the project
    should not blow up if a project doesn't have a campfire notification channel
  send_test_message
    should send a test message to the right room
    should use the correct credentials
    should show the correct error message in case of failure
    should ignore unknown exceptions (not CampfireExceptions)

CcTrayController
  should not raise error is user has no projects
  should not raise error if project has no history
  should not raise error if project has exactly one scheduled pipeline instance
  should not raise error if project has exactly 1 partially completed pipeline instance with 1 completed stage
  should not raise error if project has exactly 1 partially completed pipeline instance with 2 completed stages
  should return previous stage previous pipeline result as 'LastBuildStatus' of the previous pipeline if current pipeline, same stage is building
  should crawl back to find the last time a stage executed in order to report the lastBuildStatus for a stage
  should crawl back to find the last time a stage executed in order to report the lastBuildStatus for a stage when there are multiple empty pipelines lined up for execution
  Security
    should render a 404 for a bad api token for action all_projects
    should render page with a valid api token for action all_projects
    should render a 404 for a bad api token for action for_project
    should render page with a valid api token for action for_project
    should render a 404 when accessing a project that a user does not own

CommitsController
  should render a list of commits that belong to the specified pipeline instance
  should render a compare link
  should render a commits url in the compare link if there is no prior pipeline
  should raise error when pipeline id is incorrect
  should render the correct compare link for dependent pipelines(integrated branch builds)

DashboardController
  new user landing
    should have the right content when there are no projects available to add
    user has no projects of his own and there are projects available for him to add
      should list the right collaborations
    user has no project of his own and there are no projects available for him to add
      should not list any collaborations
  GET 'build_status'
    should render the name of stage currently building
    should return status of all of the current users projects which have a build status or are currently building
    should return status of an integrated branch build
    should not return status of projects the user doesn't own
    should render 'paused' when a project is paused
    should not render the number of build requests is yet to complete its first run
    should render the number of build requests about to be scheduled
    should render project as running until the build completes
  GET 'edit'
    should render an alert if there are pending builds for current user but no capacity to build it
    should user message if user has unseen messages
    should show project tiles for all the users projects
    should show the integrated branch name on the project tile
  Get 'show'
    should group projects in correctly
  provisioning_errors
    should render error message if there are provisioning errors

ErrorsController
  should render 500 output
  not_found
    should redirect to root path with a not_found param

FeedbacksController
  new
    should render a form
  post 'CREATE'
    should forward the feeback to zendesk
    should render an error if feedback validation fails when its a xhr request
    should render a flash error if feedback validation fails when request is not a xhr request
    should render a flash with success when the feedback is successfully submitted when its a xhr request
    should render a thanks when the feedback is successfully submitted when its not a xhr request
  GET 'contact-us'
    should render a form

Github::RepositoriesController
  should not show the new github repository page if user is not logged in
  PUT 'update'
    should the right flash message when auto_track_branches is enabled for a project
    should update the auto_track_branches and auto_track_branches_prefix with the supplied params
    should do nothing if the repository is halted
    should the right flash message when auto_track_branches is disabled for a project
    should fetch all branches from github if creation of existing branches is requested
    should create clones for all existing remote branches
    should not create clones which already exist
    should enqueue a delayed job for creation of clones
    should redirect to the projects configuration page
    should not allow a user change the repository he doesn't own or collaborate to
    should update repository if user wishes to integerate with a particular branch of repository
  Sidebar Operations
    GET 'edit_sidebar_for_org'
      should show an add link to a new build plan when an existing project with the same full name does not exist
      should show a collaborate link to the collaborations controller when an existing project with the same ssh_url exists
      should return a list of repositories in specified organization for the logged in user, this list should not contain only repositories adminstered by the user
      should NOT show repositories for which the user, while organization member- does not have admin rights to
      should show repositories for which the user has admin rights to
      should render error page if the repositories could not be fetched because of http error
      should render error page if the repositories could not be fetched because of bad status code
      should render error page if the repositories could not be fetched because of authorization error
    GET 'edit_sidebar_for_user'
      should return a list of repositories for the logged in user, this list should not contain only repositories you either own or adminster
      should return a list of repositories that the user adminsters in addition to the ones they own
      should render error page if the repositories could not be fetched because of http error
      should render error page if the repositories could not be fetched because of bad status code
  GET 'start_auto_track_branches'
    should have the right form
  POST 'stop_auto_track_branches'
    should disable auto track branches and redirect to the auto track branches page
    should do nothing if the repository is halted

HerokuCredentialsController
  GET 'heroku_deployments'
    should return a list of projects
    should return an empty array when there are no build plans associated with a heroku credential
    should return an empty array when there is a build plan with no heroku deployments on it
  GET 'heroku_oauth'
    should redirect to the url for heroku oauth flow
    should set the redirect back url in the session
    should set the source of the request in the session if one is supplied in the request
  DELETE 'destroy'
    should destroy the heroku_credentials with the given id
    should handle HerokuExceptions and notify the users to cleanup the SSH keys from heroku

HipchatNotificationChannelsController
  create
    should add hipchat notification to the project
    should use user's hipchat credentials
    should not update someone else's project
  delete
    should delete campfire notification channel on the project
    should not blow up if a project doesn't have a campfire notification channel
  send_test_message
    should send a test message to the right room
    should use the correct credentials
    should show the correct error message in case of failure
    should ignore unknown exceptions (not HipchatExceptions)

HttpCallbacksController
  POST 'create'
    should create a new http callback on the right project
    should flash error messages if the callback isn't valid
    should redirect the user to the project notifications page
    should not create a http callback for somebody else's project
  DELETE 'destroy'
    should remove the http callback from the right project
    should redirect the user to the project notifications page
    should not remove somebody else's http callback
  PUT 'update'
    should update the http callback for the right project
    should redirect the user to the project notifications page
    should not update somebody else's http callback

IdentityController
  GET 'project_owned_by_user'
    should return success when the project is owned by the logged in user
    should return 401 unauthorized when the project is not owned by the logged in user

ManualTriggerController
  should schedule a manual stage and display flash message when the stage is scheduled
  should not schedule a manual stage if the repository has been halted
  should set the current user to be the one who triggered the build
  reset the job fields when the user re triggers a manual stage
  should clear the pipeline's cache when a stage is scheduled
  should raise error if stage_id is not found
  should raise error if pipeline_id is not found
  should raise error if project_id is not found

MessagesController
  should delete the message

PlansController
  GET index
    with show plans page off
      should be not found
    with show plans page toggled on
      should not list trial plan
      should list plans with payment buttons for logged in users on the trial plan
      should render change plan links for logged in users with a purchased plan
      should render renew subscription link for logged in users with a purchased but inactive plan
      should list plans with no payment buttons for not logged in users

PostCommitNotificationController
  security
    should allow anonymous posts without an established session
  POST new_commit
    should send correct parameters to post commit notification processor
    should do nothing if the secret key is bad
    should respond with OK if an exception is raised while processing

Presenters::ListViewProjectPresenter
  #contruct should be generate correct presenter objects

Presenters::ProjectPresenter
  should construct the presenter object with all relevant information from the project
  should return correct css class for build status

Presenters::RepositoryPresenter
  should return the master project
  should return list of child projects

ProjectConfigurationController
  GET 'auto_track_branches'
    should render the start auto tracking link when auto tracking is disabled for the repository
    should render the change and disable link when auto tracking is enabled for the repository
    should show the branch prefix being tracked if its present
    should render the list of child projects when auto tracking is enabled for the repository
  GET 'status_images'
    should render the status image link
  POST 'status_images'
    should render the status image link
  GET 'edit_plan'
    should not render the back link when the build plan is being edited
    should not render the project delete link when the build plan is being edited
    should render an editable build plan only when the project is pause
    should render error if project is not paused
    should set from_edit if there is a param with the same name
  POST 'finish_edit_plan'
    should unpause the current project
    should render errors when the project could not be unpaused
    should rerun the last build
    should do nothing if the project is halted
    should render errors when the project could not be rerun
    should recreate the template build plan when the project being edited is a master project
    should not recreate the template build plan when the project being edited is a child project
  GET 'show'
    should render a build plan
    should not show the 'Why we configured the pipeline the way we did' message dialog when the user edits a build plan owned by a project
    should show the 'Auto track branches' link when the project is a master project
    should not show the 'Auto track branches' link when the project is a child project
    should render a build plan edit link
    halted projects
      should render a disabled build plan edit link
      should render a disabled branch tracking link for master projects
      should render a disabled clone link for master projects
  GET 'notifications'
    http callbacks
      should render http callback form
    hipchat notifications
      should have the right data bindings when the credentials are present
      should have no data bindings when the credentials are absent
      should have correct test-hipchat-post-path
      should ask user to add hipchat credentials if absent
      should show a form to enter the room name if credentials are present
      should show the room name being used and creds present when notifications have been configured for a project to any collaborator on that project
      should show the room name being used and creds present when notifications have been configured for a project
    campfire credentials
      should have the right data bindings when the credentials are present
      should have no data bindings when the credentials are absent
      should have correct test-campfire-post-path
      should ask user to add campfire credentials if absent
      should show a form to enter the room name if credentials are present
      should show the room name being used and creds present when notifications have been configured for a project to any collaborator on that project
      should show the room name being used and creds present when notifications have been configured for a project

ProjectsController
  POST 'add_collaboration'
    should not create a new collaboration for a repo owned by a user if it already exists
    should create a new collaboration for a repo owned by an organization if it does not already exist
    should not create a new collaboration if user does not have access to an organization
    should add a collaboration on an existing project
    should redirect users to dashboard if request is not done over xhr
    should redirect users to project build history if redirect_to param is set to build_history
  GET 'list_collaborators'
    should list all collaborators
  PUT 'regenerate_encrypted_urls'
    should not allow the action for regular users
    should change the api key for a project
  PUT 'add_all_collaborators'
    should sync collaborators from github
    should sync collaborator permissions for repos owned by orgs
    should not allow the action for regular users
  GET #refresh_team_list
    should render a json containing the list of teams
    should render error when connection to github fails
    should render error when connection to github return bad status code
    should not allow the action for regular users
  POST 'create'
    successful project creation should enqueue a delayed job to invite collaborators when the user requests for it and clear the session key containing the collaborator message
    should not attempt to provision a project for a build plan not owned by logged in user
    should not attempt to provision a project for a build plan does not have any stages
    should create a project from the specified build plan
    should create a github repository
    should create a deploy key on the associated github repository
    should create a web hook on the associated github repository
    should raise error if project could not be created for because of a validation error
    should raise error if deploy key upload to github fails
    should raise error if webhook registration with github fails
    should set the project to be a master project
  clone
    should setup correct databindings
    should show the current project's branch in the 'integrate with dropdown'
    should show errors if there are no branches available for clone.
    should show error if the project to be cloned from has only deployment stages
    should not show the branches that have been cloned
    should not show the create clone option if the user is not an administrator
    should show the create clone option if the user is an administrator
    should filter out deployment stages when showing the build plan view to user
    should not save the project if build_plan is invalid
    should ignore the 'branch_for_integration_build' parameter if it is blank
    should respect the 'branch_for_integration_build' parameter if one provided
    should reject clone requests wherein the integration branch and branch params are the same
    should clone a project with the specified branch
    should not clone halted projects
    should return failure if clone fails
    should associate the collaborators to cloned project
  rebuild_head
    should rebuild project at the head revision(last known revision for project)
    should do nothing if project does not have a build yet
    should do nothing if the project has been halted
  pause
    should pause the specified project if the project is unpaused
    should error out when project pausing fails
    should render javascript when xhr request is made
  unpause
    should unpause the specified project if the project is unpaused
    should error out when project unpausing fails
  destroy
    should delete a project administered by a logged in user
    should not delete a project not owned by the logged in user
    should display warning and destroy project if project deletion fails
  destroy as admin
    user is not an authorized admin
      should not show destroy_confirm_as_admin
      should not show destroy_as_admin
    user is an authorized admin
      should show destroy_confirm_as_admin
      should destroy specified project when destroy_as_admin is invoked
  halt as admin
    user is not an authorized admin
      should not show halt_confirm_as_admin
      should not show halt_as_admin
    user is an authorized admin
      should show halt_confirm_as_admin
      should halt specified project when halt_as_admin is invoked
  resume as admin
    user is not an authorized admin
      should not show resume_confirm_as_admin
      should not show resume_as_admin
    user is an authorized admin
      should show resume_confirm_as_admin
      should resume specified project when resume_as_admin is invoked
  remove_collaborator
    should remove a collaborator from a project if the current user is an admin of the project
    should not allow regular users
    should not allow current user to remove himself
  POST add_team
    should create users and add them as collaborators if they are not users in snap
    should make admins if the added team has adminstrative permissions
    should render an error if connection to github fails with connection error
    should render an error if connection to github fails with bad http status
    should not allow action for collaborators who are not owners
    should not allow action users that are not collaborators

RegistrantsController
  should store registrant information and provide a success message when new registrant is created
  should show errors

DummyController
  should be success if user is logged in
  should redirect to root path if user is not logged in
  should remember the url, user was trying access if not logged in
  should not remember the url for xhr requests if user is not logged in

SessionsController
  should destroy the session when logging out
  should not login or create a new user if access_token is not received
  authorized access for
    non registrant flow
      should not create a registrant if he is exists
      existing registrant
        should create an associated authorized user
    existing users
      logged in user should be redirected to the dashboard edit path by default
      should redirect to dashboard page if user preference is list view
      not logged in user should be redirected to the root path
      should obtain an access token and create a user if user does not already exist when logging in
      should redirect to edit_dashboard if user has projects
      should redirect to the previously accessed url (unless it's the root path) if the user successfully logs in
      should redirect to available_projects if the user doesn't have any projects
      should obtain an access token and not create a user if user already exists when logging in
    new user when registration is disabled
      create a new registrant if it doesn't exist
    new user when registration is enabled
      should delete the registrant id from the session
      should obtain an access token and create a user if user does not already exist when logging in
      should authorize the registrant
      should redirect to edit_dashboard if user has projects
      should redirect to the previously accessed url (unless it's the root path) if the user successfully logs in
      should redirect to available_projects if the user doesn't have any projects
  unauthorized access
    should forbid unauthorized user from loging in
  github errors
    should forbid login if connection to github fails with connection error
    should forbid login if github throws 500
  index
    should flash the right error message if there's a not found param

SignupController
  GET 'invitation'
    should redirect users with invalid invitation codes to the login page
    should redirect users with valid invitation codes to the signup page
    should add the registrant id to the session
  GET 'signup'
    should redirect users to login page if the session doesn't have a valid registrant id
    should render the signup page if the session has a valid registrant id

SubscriptionsController
  DELETE 'destroy'
    should unsubscribe the subscription and redirect to the user repositories page
    should render an error if the delete fails
  POST 'create'
    should create a subscription and redirect to dashboard
    should render error if creating a subscription fails
  PUT 'update'
    should update an existing subscription and redirect to the dashboard
    should render an error if updating a subscription fails

UserSettingsController
  GET 'repositories'
    show_plans_page toggle on
      should show the user's build allowance information
      should show the unsubscribe link if the current plan isn't a trial plan
      should not show the unsubscribe link if the current plan is a trial plan
      should show the subscribe link if the current plan is a trial plan
      should show the re-subscribe link if the current plan isn't active on stripe
    show_plans_page toggled off
      should now show any build allowance information
  edit
    heroku credentials
      should show a message that there are no heroku credentials for this user, if indeed, there are none
      should store the redirect_uri
      should show heroku credentials which have a build plan associated with them
      should show heroku credentials if the user has one
    hipchat credentials
      should show form to add new credentials if there aren't any
      should create hipchat credentials for the signed-in user
      should redirect to the url sent in the params
      should stay on the same page if the redirect uri specified if blank
      should render errors and stay on the same page
      should set the right flash message when the redirect uri specified is blank
      should show hipchat credentials
      should show link to delete hipchat credentials
      should destroy the hipchat credentials
    campfire credentials
      should show form to add new credentials if there aren't any
      should store the redirect_uri
      should create new campfire credentials for the logged in user
      should redirect to the url sent in the params
      should stay on the same page if the redirect uri specified is blank
      should render errors and stay on the same page
      should set the right flash message when the redirect_uri in the params is blank
      should show campfire credentials
      should show link to delete campfire credentials
      should delete the campfire credentials for the logged in user
    notifications
      should show the right form
      should turn off email notifications
      should turn on email notifications
  PUT regenerate_api_key
    should regenerate the logged in users api key
  #default_view
    should create display preferences for user if it doesn't exist.
    should update an existing user preference

ApplicationHelper
  should generate heroku app url for heroku app hosted on cedar
  should render the correct human readable database_name_with_version
  gravatar image
    should generate correct gravatar url for an author
    should generate image path using case insensitive email
    should generate image path using only email address
    should understand size parameter when rendering a gravatar

BuildHistoryHelper
  #commits_link
    renders the merged message for dependent pipeline
    renders all the commits separated by commas for tracking pipeline
  #expand_pipeline?
    should return false if the project is not an integrated branch build
    integrated branch builds
      should return true if any stages in the integration branch are yet to pass
      should return true if the integration build has failed
      should return true if the integration build has been cancelled
      should return true if the integration build is yet to be triggered
      should return false if the integration build has passed

BuildPlanHelper
  #heroku_deployment_has_credentials_present?
    should return true when the stage is not a HerokuDeployment
    should return false when the stage is HerokuDeployment and the build plan has no credentials on it
    should return true when the stage is HerokuDeployment and the build plan has credentials on it
  #user_owns_heroku_credentials?
    should return true if user owns the supplied credentials
    should return false if user doesn't own the supplied credentials
  #repository_display_name
    should display the name of repo when the owner name is same as the selected item in the repository listing dropdown
    should display the full name of repo when the owner name is not the same as the selected item in the repository listing dropdown

CollaboratorHelper
  should include all collaborators
  should not include the user in the list of collaborators

CubicBezierHelper
  should generate only start point when interpolating a single point on a cubic bezier path
  should generate start & one intermediate points when interpolating two points on a cubic bezier path
  should generate start & three intermediate points when interpolating two points on a cubic bezier path
  should yield points if block provided

DashboardHelper
  should set correct css based on the state of the stage
  should return correct status in the log header
  should not render log header in case the stage has not finished
  should mark div with class manual-triggered but not clickable if the stage is manual and has been triggered
  should mark div with class manual but not clickable if stage is manual but is not triggerable
  should mark div with class manual and clickable if stage is manual and triggerable
  should mark div with class manual and not clickable if stage is manual, triggerable but already running
  should mark div with class auto if stage is not manual

GithubUrlHelper
  should generate github urls for file
  should return the correct github commit url
  should return the correct github service hook admin page url
  should return the correct github service hook admin page url
  #changeset_url
    should return github_commit_url in case of reruns (prior pipeline's last commit == current pipeline's last commit)
    should return the compare url in case of different commit revisions

ProjectConfigurationHelper
  #edit_plan_action?
    should return true if the action is edit_plan
    should return false if the action is not edit_plan
  #redirect_to_project_notifications_path
    should emit a url with the a redirect_uri query string parameter redirecting back to the project notifications path

UserSettingsHelper
  #credentials_delete_warning
    hipchat_credentials
      should render nothing if there are no projects using the supplied credentials
      should render warning message which contains a list of project
    campfire_credentials
      should render nothing if there are no projects using the supplied credentials
      should render warning message which contains a list of project

ChatNotifications
  campfire
    should post to subscribed room when there is a new commit
    should post to subscribed room when manual stage is triggered
    build status changed
      should post to subscribed room on failure
      should post to subscribed room on success after 1 failing build
  hipchat
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0   100      0    216 --:--:-- --:--:-- --:--:--   216
  0     0    0     0    0   100      0     68 --:--:--  0:00:01 --:--:--     0
  0     0    0     0    0   100      0     40 --:--:--  0:00:02 --:--:--     0
  0     0    0     0    0   100      0     28 --:--:--  0:00:03 --:--:--     0
  0     0    0     0    0   100      0     22 --:--:--  0:00:04 --:--:--     0
  0     0    0     0    0   100      0     18 --:--:--  0:00:05 --:--:--     0
  0     0    0     0    0   100      0     15 --:--:--  0:00:06 --:--:--     0
  0     0    0     0    0   100      0     13 --:--:--  0:00:07 --:--:--     0
  0     0    0     0    0   100      0     11 --:--:--  0:00:08 --:--:--     0
  0     0    0     0    0   100      0     10 --:--:--  0:00:09 --:--:--     0
  0     0    0     0    0   100      0      9 --:--:--  0:00:10 --:--:--     0
  0     0    0     0    0   100      0      8 --:--:--  0:00:11 --:--:--     0
  0     0    0     0    0   100      0      8 --:--:--  0:00:12 --:--:--     0
  0     0    0     0    0   100      0      7 --:--:--  0:00:13 --:--:--     0
174   248  124   248    0   100     17      6  0:00:14  0:00:14 --:--:--    30
174   248  124   248    0   100     17      6  0:00:14  0:00:14 --:--:--    37
polling hipchat chatroom...
polling hipchat chatroom...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0    16    0    16    0     0     17      0 --:--:-- --:--:-- --:--:--    27
  0    16    0    16    0     0     17      0 --:--:-- --:--:-- --:--:--    27
    should post to subscribed room when there is a new commit
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0   100      0    301 --:--:-- --:--:-- --:--:--   301
174   248  124   248    0   100    535    216 --:--:-- --:--:-- --:--:--  1138
polling hipchat chatroom...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0    16    0    16    0     0     25      0 --:--:-- --:--:-- --:--:--    61
  0    16    0    16    0     0     25      0 --:--:-- --:--:-- --:--:--    61
    should post to subscribed room when manual stage is triggered
    build status changed
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0   100      0    287 --:--:-- --:--:-- --:--:--   287
174   248  124   248    0   100    375    151 --:--:-- --:--:-- --:--:--   472
174   248  124   248    0   100    375    151 --:--:-- --:--:-- --:--:--   472
polling hipchat chatroom...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0    16    0    16    0     0     25      0 --:--:-- --:--:-- --:--:--    60
      should post to subscribed room when the first build fails
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0   100      0    113 --:--:-- --:--:-- --:--:--   113
174   248  124   248    0   100    213     86  0:00:01  0:00:01 --:--:--   521
174   248  124   248    0   100    213     86  0:00:01  0:00:01 --:--:--   521
polling hipchat chatroom...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0    16    0    16    0     0     32      0 --:--:-- --:--:-- --:--:--   108
      should post to subscribed room on failure after 1 passing build
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0   100      0    299 --:--:-- --:--:-- --:--:--   299
174   248  124   248    0   100    529    213 --:--:-- --:--:-- --:--:--  1104
polling hipchat chatroom...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed

  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
  0    16    0    16    0     0     33      0 --:--:-- --:--:-- --:--:--   134
      should post to subscribed room on success after 1 failing build

PostFeedbackToZendeskJob
  should create a ticket with the correct attributes

BuildAllowanceEnforcerJob
  #perform
    should call halt_if_expired on all build allowances

BuildPlanDetectionJob
  delayed job
    should generate correct worker execution command
    should mark the detection as failed if git operation fails

Gnocci::ManualTriggerWorkerJob
  should run all the automatic stages after the manually triggered stage and before the next manual in the correct order when every stage passes for non-integration branch builds
  should stop execution of subsequent stages when a stage fails
  should stop execution of subsequent stages when a stage is cancelled by user
  integration builds
    should run all the automatic stages on the default and the integration pipelines after the manually triggered stage on default pipeline in the correct order when every stage passes
  error handling
    should update project provisioning executing a command fails
  S3 uploads
    should upload artifacts of all executed stages to S3

Gnocci::PostCommitWorkerJob
  should update the pipeline's schedule time
  should stop execution of subsequent stages when a stage fails
  should stop execution of subsequent stages when a stage is cancelled by user
  Command execution
    should be in the right order
  error handling
    should update project provisioning executing a command fails
    project delete
      does NOT notify errors if notification does NOT exist anymore
      does NOT run stages
  S3 uploads
    should upload artifacts of all executed stages to S3
  non integration branch builds
    should run all automatic stages when the pipeline has no manual stages
    should run all the automatic stages before the first manual in the correct order when every stage passes
  integration branch builds
    should run all automatic stages when the pipeline has no manual stages
    should run all the automatic stages before the first manual in the correct order when every stage passes

InviteCollaboratorsJob
  should fetch all the collaborators from github for a given project
  should add the collaborators to the authorized list
  should not error out if the collaborators are already authorized users
  should send out an email to all collaborators
  should not send an invite to the person who setup the build(the project's owner)

MixpanelTrackingJob
  job creation
    should track post commit notification processing
    should track manual triggering (PENDING: Temporarily disabled with xit)
  posting to mixpanel
    should send a build start event when a post commit notification is generated

RegistrantMarketoSyncJob
  params
    should send the right registrant information in the post params
  success
    should mark the registrant as synced
  failure
    should raise an error

SubscriptionSyncAllJob
  should update all build allowances from the API endpoint

SubscriptionSyncJob
  should update the build allowance from the API endpoint

BuildStatusChangeMailer
  state_changed and there are no users to notify
    should not be delivered
  state_changed and its the first time the stage ran
    should have the right subject
  state_changed and its not the first time pipeline run
    should get delivered
    should have the right subject
    should have the right subject for integrated builds
    should have the right body
    should have the right body for integrated builds
    should not include a link to the build logs if the build passed
    should not escape the author email
    should not escape the commit message
    should be sent to the project users who have opted for email notifications

CollaboratorInviteMailer
  should get delivered
  should have the right subject
  should be sent to the correct email
  should have correct content

ManualTriggerMailer
  manual_trigger and there are no users to notify
    should not be delivered
  manual_trigger and there are users to notify
    should get delivered
    should have the right subject
    should be sent to all users who have opted for notifications
    should have correct content
    should list out all commits

MonitorMailer
  Monitor Errors
    should get delivered
    should be sent to the snap admins
    should have correct content

ProjectProvisioningMailer
  Provisioning errors
    should get delivered
    should have the right subject
    should be sent to the snap admins
    should have correct content

ProjectSetupMailer
  first_job and there are no users to notify
    should not be delivered
  first_job and there are users to nofify
    should get delivered
    should have the right subject
    should be sent to all the users of the project who have opted for email notifications
    should have correct content in text mail
    should have correct content in html mail

RegistrantMailer
  #thank_you
    should send the thank you email
    should send it to right registrant
    should have the right subject
    should have the right body
    should mark the registrant as thanked
  #invite
    should send the invitation email
    should send it to right registrant
    should have the right subject
    should have the body with the link to login to Snap
    should mark the registrant as invited

Admin::AuthorizedUser
  should not downcase github username before saving
  should return the creator of the authorized user
  should not allow duplicate github usernames
  should tell if a user is authorized or not
  should match authorized users case insensitively
  should answer true for authorized_as_admin? if user is an admin
  when github username is empty
    should not be valid
  #with_github_username
    should find user with case insensitive match
  #with_github_username_matching
    should find users matching a keyword
  mass assigment
    should fail for user
    should fail for admin
  god mode
    should answer false for #god? if admin user is not god
    should answer false for #god? if non admin user is not god
    should answer true for #god? if admin user is god
    should not allow creating non-admin god users

ApplicationSetting
  send_admin_email
    should return true if the send_admin_email is set to '1'
    should return false if the send_admin_email is set to '0'
    should return false if send_admin_email doesn't exist
  maintenance_mode
    should return true if maintenence mode is set to '1'
    should return false if maintenance_mode is set to '0'
    should return false if maintenance_mode doesn't exist
  #toggle
    should toggle the supplied setting
  #state
    should return the state of the setting

BuildAllowance
  .build_default
    should initialize a default build allowance
  #expired?
    should be expired if valid till is in the past and the allowance is activated
    should not be expired if valid till is in the past and the allowance is deactivated
  update_build_allowance
    should update itself
  #halt_if_expired
    should halt all the user's project if the build allowance has expired
    should resume scheduling of any halted repositories if the build allowance has not expired

BuildPlan::ConfigurableStage::Artifact
  validations
    should not be valid with an empty directory
    directory should allow dots in between
    should not allow references to any parent directories
    should not allow absolute pathnames
    should not allow working directory
  behavior
    should be propagated by default
    #self_clone
      should return a clone of itself
    #to_xml
      should generate valid xml for top level artifact dir
      should generate valid xml for nested artifact dir
    #to_gnocci
      should generate a valid json
    #propagated
      should return all propagated artifacts

BuildPlan::ConfigurableStage
  approval_type should default to sucess by default
  should not create a stage with no tasks
  validates uniqueness of stage name within a build plan
  should clone the stage with the same tasks, environment_variables and artifacts
  should generate valid xml
  custom stage with default tasks
    should include the correct tasks if local gems present
    should include the correct tasks if local gems are not present
    should include the correct tasks if a database is supplied

BuildPlan::EnvironmentVariable
  should not show secure environment variables on the UI
  should clone the environment variable
  association
    should be associated with a build plan
  validation
    should mark environment_variable as invalid if key is empty
    should be unique per environment
    can be non-unique across environment
    should be invalid if the key is over 255 characters
  #to_xml
    should be valid
  #to_gnocci
    should be valid

BuildPlan::FetchArtifact
  #to_xml
    should generate valid xml for top level artifact dir
    should generate valid xml for nested artifact dir

BuildPlan::HerokuDeployment
  should mark the object as invalid when the stack_name is blank
  should mark the object as invalid when the app_name is blank
  should mark the object as invalid when run_db_migrate is true for java builds
  approval_type should default to manual by default
  should not do anything when cloned
  should generate correct go config stage xml
  should generate correct go config stage xml when the db migrate is turned off
  #missing_credentials?
    should return true when the build plan has no credentials associated with it
    should return false when the build plan has heroku credentials associated with it

BuildPlan::Language
  RubyLanguage
    should validate ruby version
    should set a default ruby version on create
    should return the absolute path of bin directory
  java language
    should validate java version
    should set a default java version on create
    on centos
      should return the absolute path of bin directory
      should return an environment variable for JAVA_HOME
    on Ubuntu
      should return the absolute path of bin directory
      should return an environment variable for JAVA_HOME

BuildPlan::Stage
  should validate presence of name
  should validate presence of job_name
  should validate presence of stage_order
  should validates format and length of name
  should validates format and length of job_name
  validates that the first stage approval can be 'success' only
  validates that stage approval can be either 'manual' or 'success' for subsequent stages only
  should show the correct error message when stage name is blank
  should reject stages with duplicate stage names
  errors out if updated first stage is set to be manual in the build plan
  should include artifacts in the gnocci config if the stage has artifacts configured
  should NOT include any artifacts int the gnocci config if the stage doesn't have any artifacts
  should mark the first stage of integration pipeline to be manual
  should return manual if stage is part of integration build and is the first stage
  should return true if stage is part of integration build and is the first stage
  #to_xml
    should include the PATH and LD_LIBRARY_PATH in the xml that it generates
    should not include the PATH in the xml if one is not specified on the stage
  #to_gnocci
    should generate the correct gnocci config
    should include the PATH and LD_LIBRARY_PATH in the gnocci json that it generates
    should include the PATH and LD_LIBRARY_PATH in the gnocci config even when they are not specified on the stage
    should create JAVA_HOME environment variable if the language is java
    should create DATABASE_URL environment variable if and a database is selected and if its not rails/ruby project

BuildPlan::Task
  should validate presence of command
  should validate length of command to be less than 255 characters
  should validate runif to be either 'passed', 'failed' or 'any' only
  should clone the task with the same command
  #to_xml
    should be valid
  #to_gnocci
    should be a valid json

BuildRequest
  should send the list of build requests pending in the work queue for more than 10 minutes
  validates presence of build_state
  should set a default build state when a build request gets created with blank build_state
  should set mark a request to be dropped
  #schedule
    should set build_state to 'scheduled' and create a PostCommitWorkerJob
  #droppable
    should return true for when pipeline is pending
    should return false when a pipeline is pending but is already marked to be dropped

BuildStatistic
  should update the average when #generate_new_average is invoked with the wait time
  should answer the average_build_time for a project

CampfireCredentials
  should not allow empty api_key
  should not allow empty subdomain
  campfire notifications associations
    when destroying parent creds
      should get destroyed
  mass assigment
    should fail for user

CampfireNotificationChannel
  campfire credentials
    when empty
      should not be valid
  room selection
    when empty
      should not be valid
  self_clone
    should clone itself with the right room and credentials
  notifications
    should try to speak in the room
  new commit
    should send right message
  manual trigger
    should send the right message
  test_message
    should send the right message
    should raise an exception if the room doesn't exist
    should rescue any exceptions raised by #notify and rethrow them as CampfireExceptions
    should preserve the original exception's message
  build status changed
    with a failing build
      should send a failure message
    with a passing build
      should send a passing message

Collaboration
  should not create two collaborations for the same user and project
  A User who is a collaborator on multiple projects
    should list a project if a given user is a collaborator on a given project

DetectionState
  should only allow passed or failed or null values for detection state
  should validate presence of build_plan
  should return true for #pending? if there is no result

Feedback
  should validate presence of name
  should validate presence of email
  should validate presence of subject
  should validate presence of body

GitCommandsHelper
  should generate git_fetch_command

GitMaterial
  should validate presence of branch_name
  should generate correct ssh_url for project
  should generate correct git_proxy_url for project
  should clone the git material
  #to_xml
    should generate the correct config
  #to_gnocci
    should generate the correct config

Github::API::Branches
  should fetch a list of all branches for a specified repository
  should raise error if github responded with a bad status code
  should raise error if http connection to github failed

Github::API::Collaborator
  .all
    should fetch a list of all collaborators at a specified url
    should raise error if github responded with a bad status code
    should raise error if http connection to github failed
  .admins_for
    organization owned repos
      should fetch the list of admins from the current list of collaborators

Github::API::Organization
  should fetch a list of all orgs a user belongs to
  should raise ConnectionError if github responded with a bad status code
  should raise AuthError if github responded with status 401
  should raise AuthError if github responded with status 403
  should raise error if http connection to github failed

Github::API::Repository
  should fetch a list of all repositories at a specified url
  should raise error if github responded with a bad status code
  should raise error if http connection to github failed

Github::API::Revision
  #head
    should call fetch
    should retrieve the last commit on the project default branch
  #commit
    should retrieve full commit information for the sha
    should call fetch
  #fetch
    should raise error when commit information retrieval from GitHub fails with bad http status code
    should raise error when commit information retrieval from GitHub fails with connection error

Github::API::Team
  .all_admins
    should fetch a list of all admin teams
  .admin?
    should report if a team has administrative permissions

Github::DeployKey
  title is self-explanatory

Github::Helpers
  should be able to exract link header from a bunch of headers
  should be able to exract next header from link header when next link is present
  should safely return nil if no next link is present
  should safely return nil if no link header is present
  should identify link rel type correctly
  should identify link uri type correctly
  should set rel to nil if none specified
  should set rel to nil if header appears damaged or illegal
  should identify link as a next-rel-type if rel-type is next

Github::PostCommitNotificationProcessor
  #process
    should create multiple commits if notification contains multiple commits
    should do nothing if the repository is halted
    on initial commit
      should create a post commit notification
    on branch creation
      should not create a new project or post commit notification if auto branch tracking is disabled
      should create a new project if auto branch tracking is enabled
      should do nothing if the repository is halted
    on branch deletion
      should destroy project if auto branch tracking is enabled
      should not destroy project if auto branch tracking is disabled
      should do nothing if the repository is halted
    on tag creation
      should ignore
    on tag deletion
      should ignore

Github::Repository
  should validate the presence of owner_type
  should validate the presence of owner_name
  should validate the presence of name
  should validate the presence of billing_owner
  should not allow duplicate entries
  should validate that owner_type is either 'organization' or 'user'
  #recreate_template_build_plan_from!
    should replace the existing template build plan with a clone of the provided build_plan
  #find_project_by_branch
    should locate the associated project which builds against the supplied branch
  #find_master_project
    should return the master project
    should return nil if no master project exists
  #full_name
    should return the correct full name of a repository
  #ssh_url
    should return the correct ssh url of repository
  #maybe_clone_project!
    auto_track_branches is disabled
      should not perform a project clone
    auto_track_branches is enabled
      should create a clone when the branch prefix matches
      should not create a clone when the branch prefix doesn't match
      should not create a clone when the clone already exists
      should create a clone when the branch prefix is blank
      should create a clone that includes all collaborators on the master project
      should create a clone which has notification channels as on the master project
      should create a clone that integrates with the supplied integration branch
  #maybe_destroy_child_project!
    should do nothing when auto_track_branches is turned off
    should do nothing when a project for that branch doesn't exist
    should do nothing when the project being deleted is a master project
    should destroy a child project when it exists
  #child_projects
    should return an empty array if there is only master project created for a repository
    should return the child projects
    should return child projects in ascending order of their branch names
  destroy
    should destroy its deploy key
    should set errors on itself if destroying the deploy key fails
    should destroy its web hook
    should set errors on itself if destroying the web hook fails
    should not fail if there are no deploy keys or web hooks created
    should destroy its template build plan
  #maybe_destroy
    should destroy itself if there's only no project associated
    should not destroy itself when there are more than one projects associated with it

Github::WebHook
  should generate a secret key on save

Github
  #user_profile_for
    should fetch user profile details
    should raise error when github throws 500 while fetching user profile
    should raise error when connection to github fails while fetching user profile
  #user_emails_for
    should fetch user email details
    should raise error when github throws 500 while fetching email address
    should raise error when connection to github fails while fetching email address
  #public_profile_for
    should fetch user profile details
    should raise error when github throws 500 while fetching user profile
    should raise error when connection to github fails while fetching user profile
  authorize
    should fetch oauth access_token if code is correct
    should raise error if access_token is not received
    should raise error if fetching access token returns status 500
    should raise error if fetching access token fails with connection error
  #teams_for_repository
    should return a list of teams for a repository owned by an organization
    should raise error when github throws a bad status code (4XX, 5XX) while fetching teams of a repository
    should raise error when connection to github fails while fetching teams of a repository
  #members_of_team
    should return a list of members of a team
    should raise an error when github throws a bad status code (4XX, 5XX) while fetching members of a team
    should raise error when connection to github fails while fetching members of a team

Gnocci::ManualTrigger
  validates presence of a user
  should send notifcation on create
  should raise error when attempting to drop request (since we do not want to delete the pipeline instance that has already partially run)
  #destroy
    should invalidate pipeline cache

Gnocci::PostCommitNotification
  should cleanup the pipeline structure and delete the build request when #drop_request is called
  validations
    should mark the object as invalid when the ref is blank or nil
    should mark the object as invalid when the sha_before_push is blank
    should mark the object as invalid when the sha_after_push is blank
    should mark the object as invalid when the project is nil
  Pipeline Structure
    should save the gnocci post commit notification with a newly created pipeline instance with correct commit/label/author/run list
    should save the gnocci post commit notification with a newly created pipeline instance with correct commit/label/author/run list for integrated branch builds
    should cleanup the pipeline structure and delete the build request when #performed_with_errors is called

Gnocci::Stage
  #run
    should perform a job start before running gnocci
    should update the stage's duration
    should create go artifacts only when they don't exist
    should not create go artifacts when they already exist
    should execute the right commands while running gnocci
    passing stage
      should perform a job end after running gnocci and mark the stage to have passed
    failing stage
      should perform a job end after running gnocci and mark the stage to have failed
    cancelled stage
      should perform a job end after running gnocci and mark the stage to have been cancelled
      should not create go artifacts
  #console_log_path
    should generate the correct console path
  #upload_artifacts_to_s3
    should upload all artifacts
  #fetch_previous_artifacts_from_s3
    should download and unpack artifacts from s3 if requested

Go::Artifact
  returns its download url

Go::Commit
  author display name should strip out email segment if present
  notification
    should notify of a new commit only if the commit does not belong to an integration branch

Go::Pipeline
  should answer the last commit on a pipeline
  should return dependent pipeline if present
  should return the tracking pipeline
  should answer if the pipeline is dependent
  should answer if the pipeline is a tracking pipeline
  should return its related pipeline (dependent -> tracking, tracking -> dependent) or nil if it doesn't have a related pipeline
  should specify if a pipeline is a member of an integrated branch build
  should determine if  pipeline is compelete till the first manual stage
  should error when attempting to run a pipeline without a counter
  should not allow reassignment of counter
  pipeline creation
    should create a pipeline with the right right stages and jobs as given in the build plan without integrated build
    should create a pipeline with the right stages and jobs as given in the build plan with an integrated build
    should create a dependent pipeline with the right integration commit revision and type
  stage ordering
    should be ordered by creation time
  on deletion
    should destroy dependant stages
    should destroy dependant commits
  counters
    should return pipeline instances for a project before a pipeline id (previous page)
    should return pipeline instances for a project after a pipeline counter inclusive of the current pipeline
  #initialize_counter
    should initialize pipeline counter to 1 when there are no previously triggered pipelines
    should initialize the counter to the next available pipeline counter when there are previously triggered pipelines
    should do nothing when the pipeline already has a counter
    should update the counter of the dependent pipeline
  duration
    should exclude the pending stages from the computation
    should compute the correct duration when all the stages are complete
  completion
    should report itself to be completed if all stages have passed
    should report itself to be completed if any stage has failed
    should report itself to be completed if any stage has been cancelled
    should report itself to be completed if all stages upto the manual trigger have completed
  triggerability
    should return true if a stage is manual trigger and stages prior to that stage have completed
    should return false if a manual stage has already been triggered
    should return false if a stage is auto trigger even if stages prior to that stage have completed
    should return false if a stage is manual trigger even if stages prior to that stage have not completed
    should return false if a stage is auto trigger even if stages prior to that stage have not completed
  #combined_result
    should return the result of the pipeline when its not member of an integrated branch build
    should return the result of the tracking pipeline until we have a result on the dependent pipeline
    should return the result of the dependent pipeline when it has a result
  #prior_pipeline
    should return the prior pipeline
    the returned prior pipeline should be of the same type

Go::Stage
  completion
    should tell if it's completed
    should tell if it's pending
    should tell if it has failed
    should tell if it has been cancelled
    should set duration when job is completed
  #triggered?
    should return true if there is a deployment trigger for this stage
    should return false if there are no deployment triggers for this stage
  manually trigger stage
    sets user who triggered the build
    resets job state
  #console_log_url
    should generate correct url for current stages
    should generate correct url for previously run stages
  result
    downcases result before saving

GoSaasWorker::CommandRunner
  should execute commands in order
  should not halt the execution of the chain if none of the command fails
  should halt the execution of the chain if any command fails

GoSaasWorker::Config::Generator
  should detect if local gems present
  should detect if local gems are not present
  should detect rails without a database, with test::unit
  should detect rails with a database and test::unit
  should detect rubygems without a database, with test::unit
  should detect rubygems with a database and test::unit
  should detect mysql and test::unit
  should detect pg and test::unit
  should create a symlink to database.yml
  should detect unit tests on rubygems
  should not detect RSpecs if no targets present in the spec folder in the FastFeedback stage
  should ensure that tasks are in the right order
  java project
    should detect a build.xml tool and create a default task
    should detect a pom.xml tool and create a default task
    should detect a build.gradle tool and create a default task
    database
      should add a DATABASE_URL environment variable to the pipeline
      should not attempt to symlink a database.yml
  Integration tests stage
    should detect poltergeist based integration test builds
    should detect rack request specs with the rack driver
    should detect spec features
    should detect only spec features when both features and request specs are detected
    should not detect RSpecs if no targets present in the spec folder in the Integration stage
    should not detect Test::Unit if no targets present in the test folder in the Integration stage

GoSaasWorker::Detect::Database
  RailsDatabaseSupport
    should not change run_list if no database is detected
    should not error out if no database is detected
    determine postgres db from gemfile
    determine mysql db from gemfile
    determine sqlite db from gemfile
    should detect database in the development group in gemfile
    should detect database specified in a custom group in gemfile
    should prefer the gem specified in test group over a custom group
    should prefer the test database over the development
    should fallback to the database in the default gem group in case the development group doesn't have a db
    should use the production database if nothing compatible is found in either dev/test or default
    production db is used only if no compatible db is found in dev/test or default
  RubygemsDatabaseSupport
    should always answer true for #success? when there is no database gem
    gemfile should be searched if database is not present in gemspec
    gemspec takes priority over gemfile
    should prefer a gem specified in the development group over the runtime group

GoSaasWorker::Detect::DefaultJavaTask
  should be success if build.xml is present
  should be success if pom.xml is present
  should be success if build.gradle is present
  fail if neither build.xml, pom.xml nor build.gradle are present
  multiple build tools present
    should give priority to maven over ant
    should give priority to maven over gradle

GoSaasWorker::Detect::Framework
  should have all detectors for all supported frameworks
  should succeed if rails is detected
  should succeed if rubygems is detected
  should succeed if java is detected
  should fail if neither rubygems nor rails detected

GoSaasWorker::Detect::GemCache
  should succeed even if vendor/cache dir not present
  should succeed when the vendor/cache dir is found

GoSaasWorker::Detect::Gemfile
  should set failure status if Gemfile is not present at project root
  should set success status if Gemfile is present at project root

GoSaasWorker::Detect::JavaFramework
  should have all detectors specific to java
  should detect if its java project if it has either build.xml, pom.xml or build.gradle
  should fail if java is not detected

GoSaasWorker::Detect::Java
  should be success if build.xml is present
  should be success if pom.xml is present
  should be success if build.gradle is present
  fail if neither build.xml, pom.xml nor build.gradle are present

GoSaasWorker::Detect::JavascriptTestFramework
  should not detect jasmine if gem not present in Gemfile
  should detect jasmine if gem is present in Gemfile

GoSaasWorker::Detect::RailsGroup
  should have all detectors specific to rails
  should detect if its rails project if Gemfile contains rails
  should detect if its rails project if Gemfile contains rails git url
  should not detect rails project if Gemfile does not contain rails
  should not detect rails project if Gemfile does not contains commented rails
  should detect database if present
  should be success even if database is not present
  should fail if rails is not detected

GoSaasWorker::Detect::Rails
  should be success if script/rails is present
  fail if script/rails not present

GoSaasWorker::Detect::RubyFramework
  should have all detectors specific to ruby
  should fail detection if neither ruby detection fails
  should pass detection if rails app with no zeroci.yaml
  should pass detection if rubygem with no zeroci.yaml

GoSaasWorker::Detect::Ruby
  should translate known ruby to full system path
  should use default ruby if ruby version is not among known rubies
  should use default ruby if ruby version is is not a valid version string
  should detect if a ruby version is specified in the .zeroci.yml file
  should use default ruby version if it is not present in .zeroci.yml file
  should detect if a ruby version is specified in the Gemfile
  should use default ruby version if it is not present in gemfile
  should detect if a ruby version is specified in a .ruby-version file
  should use default ruby if version specified in .ruby-version is not a valid version string
  should detect if a ruby version is specified in the rvmrc
  should use default ruby if a ruby version is not specified in rvmrc
  should assume latest patch level when a patch level is not specified
  should prefer ruby version specified in zeroci.yml over all others
  should prefer ruby version specified in Gemfile over rvmrc if .zeroci.yml doesn't have ruby

GoSaasWorker::Detect::RubygemsGroup
  should have all detectors specific to rubygems
  should report failure if gemspec is not present
  should succeed if rubygems
  should detect database if present
  should fail if rubygem is not detected

GoSaasWorker::Detect::RubyGems
  Should be success if *.gemspec is present
  Should fail if *.gemspec is not present

GoSaasWorker::Detect::SystemProperties
  should detect the system.properties file
  should not fail when the system.properties file is blank
  should not fail when the java.runtime.version key is present with an invalid value
  should detect the correct java version in the system.properties file
  should set the correct java version from the system.properties file
  should fail when the java version detected is unsupported

GoSaasWorker::Detect::Twist
  should detect twist dependency based on zeroci.yml
  should detect lack of twist dependency based on zeroci.yml
  should not barf if twist key is missing

GoSaasWorker::Detect::UnitTestFramework
  should report failure if there is no spec or test folder at project root
  should detect both test/unit and rspec if they are present
  should detect only integration spec targets to run for a rails project with a spec/requests dir
  test unit
    should detect test unit if test folder is present at project root
    should detect the correct tests to be run for a rails project with test/integration dir
    should detect the correct tests to be run for a rails project without test/integration dir
    should detect the correct tests to be run when project is a ruby project
  rspec
    should detect rspec if spec folder is present at project root
    should detect the correct specs to be run when project is a ruby project
    should detect the correct specs to be run for a rails project with spec/requests dir
    should detect the correct specs to be run for a rails project with spec/features dir
    should detect the correct specs to be run for a rails project without spec/requests or spec/features dir

GoSaasWorker::Status
  should be able to add predefined status messages
  should not add predefined status message if a status key is missing
  should not add status message if key is unknown

GoXmlBuilder
  should perform xml escaping
  should escape go param interpolation char #

Heroku::App
  #fetch_all
    should refresh the access token before fetching the apps
    should fetch all Heroku apps
    should raise HerokuCredentials::ConnectionError if heroku gives a bad response
    should raise HerokuCredentials::AuthError if heroku gives 401 or 403
    should raise HerokuCredentials::ConnectionError if http connection fails

Heroku::Keys
  #delete_key
    should refresh the access token before fetching the apps
    should delete the heroku key with the given fingerprint
    should raise HerokuCredentials::ConnectionError if heroku gives a bad response
    should raise HerokuCredentials::AuthError if heroku gives 401 or 403
    should raise HerokuCredentials::ConnectionError if http connection fails

HerokuCredentials
  should create a ssh key on create
  should upload added SSH Key to heroku
  should not create the heroku credentials when the uploading of the SSH Key fails
  should not create the heroku credentials when there is a connection error when uploading the ssh key
  should destroy the ssh deploy key after the heroku credential is destroyed
  #destroy_without_heroku_keys_cleanup should destroy the ssh deploy key and itself without deleting the key from heroku
  #from_omniauth!
    should update the oauth tokens
    should raise HerokuCredentials::ConnectionError if heroku gives a bad response
    should raise HerokuCredentials::AuthError if heroku gives 401 or 403
    should raise HerokuCredentials::ConnectionError if http connection fails
  #refresh_access_token
    should post to heroku with the right data
    should update the heroku credentials with the new access_token
    should return early if the Heroku credentials don't have a refresh token

HipchatCredentials
  should respond to #user_id
  should respond to #api_key
  should respond to #username
  should respond to #hipchat_notification_channels
  should not allow empty api_key
  should not allow empty username
  should not allow usernames longer than 15 characters
  when user_id is empty
    should not be valid
  hipchat notifications associations
    when destroying parent creds
      should get destroyed
  mass assigment
    should fail for user

HipchatNotificationChannel
  hipchat credentials
    when empty
      should not be valid
  room selection
    when empty
      should not be valid
  self_clone
    should clone itself with the right room and credentials
  notifications
    should send the right message
  new commit
    should send right message
  test_message
    should send the right message
    should rescue any exceptions raised by #notify and rethrow them as HipchatExceptions
    should preserve the original exception's message
  manual trigger
    should send the right message
  build status changed
    with a failing build
      should send a failure message in red
    with a passing build
      should send a passing message in green

HttpCallback
  should not allow empty urls
  should not allow strings that are not urls
  should not allow invalid urls
  should post to the url with the stage metadata when notify is called
  should increment the fail counter if the post fails
  should increment the fail counter if the post raises an exception
  self_clone
    should clone itself with the right url

HttpFetcher
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:14)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:14)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:14)
  should return true for #success? when http connection has an OK status code
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:29)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:29)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:29)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:29)
  should return true for #success? when http connection has a redirect code
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:44)
  should return false for #success? when http connection has an error status code
DEPRECATION WARNING: You passed in an :authorization option -- please use :headers => {'Authorization' => ....} instead. (called from block (3 levels) in <top (required)> at /var/go/repo/spec/models/http_fetcher_spec.rb:58)
  should raise error when http connection fails

Notification
  project hasn't finished building yet
    should not send out any notifications
  when build status changed is called
    should trigger build status changed mailer when a pipeline ends
    should trigger build status changed when there are hipchat credentials enabled for a project (PENDING: Temporarily disabled with xit)
    should trigger build status changed when there are campfire credentials enabled for a project (PENDING: Temporarily disabled with xit)
    should notify on new commit on hipchat if subscribed
    should notify on new commit on campfire if subscribed
  manual trigger
    should notify on hipchat if subscribed
    should notify on campfire if subscribed
    should send an email

PipelineCompleteNotifier
  first build
    should send a notification if a stage passes
    should send a notification if a stage fails
    should not send a notification if a pipeline doesnt complete
  subsequent builds
    should send a notification if a stage moves from passed to failed
    should send a notification if a stage moves from failed to passed
    should not send a notification if a stage moves from failed to failed
    should not send a notification if a stage moves from passed to passed
    should not send a notification when the stage is manually triggerable

PipelineTrigger
  #execute_on_head
    should create a post commit notification having last commit in default branch
  #execute
    should create a post commit notification having last commit in default branch and integration branch for integrated branch build

ProjectBuildPlan
  not allow a build plan with no stages
  should raise error if no pipeline label is provided
  should not create a project if the build allowance repository limit has been exceeded
  #editable_by?
    should answer true only if the user is a collaborator on the project
  #append_stage
    should append stage at the end for a build plan with existing stages
  #to_gnocci
    should generate valid gnocci config json from plan with no deployments configured for non integration builds
    should generate valid gnocci config json from plan with no deployments configured for integration builds
  to_xml
    should generate valid go config xml for plan with no deployments configured
    should generate dependent pipelines when integration branch is specified
    should create JAVA_HOME environment variable if the language is java
    should create DATABASE_URL environment variable if and a database is selected and if its not rails/ruby project
    should create PATH environment variable if the language is Java and should also have a default ruby on the PATH
    should prepend the PATH environment variable if the user provides one
    should only include stages marked for integration
  behaves like BuildPlanSharedExamples
    #add_new_custom_stage
      should build a new stage with default tasks when the language is ruby
      should build a new stage with no tasks when the language is java
    #database_url_environment_variable
      should generate a valid database url
    change stage order
      should allow changing order of existing stages
      should raise an exception when reordering results in the first stage being a manual stage
      should not an exception when reordering does not result in the first stage being a manual stage
      should raise an exception if reordering of stages causes a manual stage to be part of integration
    #destroy_stage
      should destroy specified stage from the build plan and return true on success
      should not allow destroying the first automatic stage if the stage following it is manual
      should not destroy a stage if total stages == 1
    #self_clone
      should create a ProjectBuildPlan with the same git_material, container os, stages and environment_variable but different branch_name
      should set integration branch if user passes in a integration branch name
      should use the last automatic before manual if none is provided in the upto_stage_in_integration_build
      should collect all configurable stages for clone if there is no upto_stage_in_clone_build passed
      should only collect configurable stages upto_stage_in_clone_build
      should mark stages for integration when upto_stage_in_integration_build is passed
      should clone the build plan without heroku deployment stages
    integration builds
      should mark a stage as part_of_integration_build if a stage which is not part_of_integration_build is moved before the first and only integration stage
      should mark a stage as part_of_integration_build if a stage which is not part_of_integration_build is moved between integration stages
    validations
      should validate database type
    #ubuntu?
      should be true if container_os is Ubuntu
      should be false if container_os is not Ubuntu
    #create_project_for_branch
      should create a ProjectBuildPlan clone
      should create a project with the supplied branch
      should not create a new project for the same branch
      integrated branch builds
        should create a project with integrated branch build

Project
  a project should be generated with an api token
  should add the creator as a collaborator
  should create message for all users to switch to list view
  should not create message for user who have display preference set
  should return null last_triggered_default_pipeline if there are no pipelines
  should return null last_triggered_default_pipeline if there is exactly one scheduled pipeline but none of it has run
  #last_triggered_default_pipeline should return the last completed pipeline if no other pipeline is running
  last_triggered_default_pipeline should return the last pipeline with a completed stage when there are other scheduled pipelines
  #last_triggered_default_pipeline should return currently running pipeline if there is one
  should return last commit time
  should return nil when no commit data is available
  #clone_exists?
    should return true if a project exists on the same repository
    should return false if a project does not exist on the same repository
  build requests
    return all build requests belonging to that project
    should destroy all post commit notifications when the project is destroyed
    should destroy all build requests when the project is destroyed
  rejected build request statistic
    should be generated upon project creation
    should be destroyed upon project deletion
  #destroy
    should destroy the build plan when the project is deleted
    should destroy the github repository if it is the last project
    should nominate a new master project when a master project is deleted and there are other projects
    should not fail when a master project is deleted and there are no other projects on the repository
    should not change the master project when a non-master project is deleted
  validation
    should not allow a pause reason more than 150 character
    should not create a new project for the same branch
    should not allow creation multiple master projects within github repository
  DetectionStatusComesBackFromWorker
    should create a pipeline with as many stages as detected, each with as many pending jobs
    should create a commit on the pipeline which will be for the detected sha
  hipchat notification
    should be deleted when the project is destroyed
  campfire notifications
    should be deleted when the project is destroyed
  job lifecycle notifications
    job start
      for a project with no history - should set the pipeline counter to 1 for first pipeline
      for a project with history - should set the pipeline counter to next available pipeline counter
      should mark the project as building
      should mark the stage corrsponding to the job as being current
      if the pipeline, stage and job already exist (in the event the stage is re-triggered inside the go-server), update the job
      should set current build_request state to 'build_in_progress' when job_start is invoked
      should clear the provisioning_errors when job_start is invoked
      should update the currently running stage
      should update job start time
    job end
      http callbacks
        should notify the job's status on http if callback configured
      integrated build
        pipeline with a single stage
          should not toggle the current build request's build_in_progress flag when the parent pipeline ends (unless it has failed)
          should toggle the current build request to change its state to build_complete when the parent pipeline fails
          should toggle the current build request to change its state to build_complete when the parent pipeline is cancelled
          should toggle the current build request to change its state to build_complete when the dependent pipeline passes
          should toggle the current build request to change its state to build_complete when the dependent pipeline fails
          should toggle the current build request to change its state to build_complete when the dependent pipeline is cancelled
        pipeline with multiple stages
          should not change the build status to build complete when the parent pipeline ends (unless it has failed)
          should not toggle the project's pipeline ended flag to false when the first automatic stage passes and it is waiting for the next automatic stage to run
          should toggle the current build request to change its state to build_complete when the parent pipeline fails
          should toggle the current build request to change its state to build_complete when the dependent pipeline passes
          should toggle the current build request to change its state to build_complete when the dependent pipeline fails
          should toggle the current build request to change its state to build_complete when the dependent pipeline is cancelled
      pipeline config with 1 stage (units)
        should mark the project as no longer building
        should mark the pipeline as no longer running when all stages finish successfully
        should mark the pipeline as no longer running when any stage fails
        should mark the stage corrsponding to the job as not being current
        should save the build result
        should update the corresponding job
        should remove job start time when a job ends
        pipeline config with 1 stage (units) and a single job in that stage
          should mark pipeline as ended if the last stage has Passed
          should mark pipeline as ended if 1st stage(Units) has Failed
          should mark pipeline as ended if 1st stage(Units) is Cancelled
        pipeline config with 1 stage (units) and multiple jobs in that stage
          should not mark the pipeline as ended if the stage hasn't finished yet
      pipeline config with 3 stages (units, functionals, deploy)
        should be ended if only when all three stages have finished
        should be ended upon failure of any stage
    hung jobs
      job is hung if job_start_time is more than 10 minutes ago
      job is not hung is job start time is not set
      job is not hung is job start time was within last 10 minutes
  clone
    should clone the project with the same build_plan, collaborators and notification channels
  rerun last revision
    should create a post commit notification with the right revision
    should not create a post commit notification when the last build revision is nil
    should create a post commit notification with the integration head sha for an integrated branch build
  http callback
    should be destroyed when a project is destroyed
  integrated branch build
    should tell if the project is not an integrated branch build
    should tell if the project is an integrated branch build
  pipeline structure creation
    should create a single pipeline instance with the right commit revision for a given build plan without integrated builds
    should create two pipeline instances with the correct commit revisions and types for a given build plan with integrated builds
  #users_to_notify
    should return the list of project users ordered by email who have opted to receive email

RegistrantObserver
  after_create
    should thank the registrant only if registration is enabled
    should not send 'thank you' email to registrant when registration is disabled
    should sync the registrant's information to Marketo
  thank
    should invoke RegistrantMailer#thank_you with the correct params

Registrant
  should not be created without an email address
  should downcase the email before creating the registrant
  should not create a duplicate record
  should not delete associated authorized user when destroyed
  should consider newly created registrant as uninvited
  should consider invited user who is not authorized as invited but not joined
  should consider an authorized user as joined
  #invite
    should generate an invite code
    should send an invitation mail
  sync_to_marketo
    should enque the RegistrantMarketoSyncJob with the right params
  #authorize
    should create an authorized user if one doesn't exist already
    should not create an authorized user if one already exists
    should delete the invite code
    should mark the registrant as joined

RejectedBuild
  #because_vz_host_capacity
    should increment vz_host_capacity by 1
  #because_paused
    should increment paused by 1
  #because_running
    should increment running by 1
  #because_build_plan_over_capacity
    should increment build_plan_capacity by 1

SshKey
  should generate a keypair when creating an ssh key
  should only store the key-data and not comments and type for public key
  can be owned by deploy key
  can be owned by heroku credentials
  should not not allow writing any attributes
  should return the fingerprint of the key

Subscription
  #update
    should send the correct params to the payments API
    should return true and update the build allowance if the subscription is updated in the payment API
    should return false if the subscription update fails with a bad status code
    should return false if connection to the subscription API fails
  #subscribe
    should send the correct params to the payments API
    should return true and update the build allowance if the subscription is created in the payment API
    should return false if the subscription creation fails with a bad status code
    should return false if connection to the subscription API fails

TemplateBuildPlan
  should have a validation error when creating multiple template build plans for the same repository
  #detection_errored? should return true when #github_connection_error! is invoked
  should not update the ruby version if none specified in the context
  should not update the java version if none specified in the context
  should not create a new project if the build allowance's repository_count has been exceeded
  should not create a new project if an build allowance has expired
  #editable_by?
    should answer true if the for the creator of the repository
  #append_stage
    should append stage at the end for an empty build plan
    should append stage at the end for a build plan with existing stages
    should not allow appending a manual stage to an empty build plan
  behaves like BuildPlanSharedExamples
    #add_new_custom_stage
      should build a new stage with default tasks when the language is ruby
      should build a new stage with no tasks when the language is java
    #database_url_environment_variable
      should generate a valid database url
    change stage order
      should allow changing order of existing stages
      should raise an exception when reordering results in the first stage being a manual stage
      should not an exception when reordering does not result in the first stage being a manual stage
      should raise an exception if reordering of stages causes a manual stage to be part of integration
    #destroy_stage
      should destroy specified stage from the build plan and return true on success
      should not allow destroying the first automatic stage if the stage following it is manual
      should not destroy a stage if total stages == 1
    #self_clone
      should create a ProjectBuildPlan with the same git_material, container os, stages and environment_variable but different branch_name
      should set integration branch if user passes in a integration branch name
      should use the last automatic before manual if none is provided in the upto_stage_in_integration_build
      should collect all configurable stages for clone if there is no upto_stage_in_clone_build passed
      should only collect configurable stages upto_stage_in_clone_build
      should mark stages for integration when upto_stage_in_integration_build is passed
      should clone the build plan without heroku deployment stages
    integration builds
      should mark a stage as part_of_integration_build if a stage which is not part_of_integration_build is moved before the first and only integration stage
      should mark a stage as part_of_integration_build if a stage which is not part_of_integration_build is moved between integration stages
    validations
      should validate database type
    #ubuntu?
      should be true if container_os is Ubuntu
      should be false if container_os is not Ubuntu
    #create_project_for_branch
      should create a ProjectBuildPlan clone
      should create a project with the supplied branch
      should not create a new project for the same branch
      integrated branch builds
        should create a project with integrated branch build

TransientGithubRepository
  should generate valid github repo clone url

User
  should be generated with an api token
  should create a default build allowance when the user is created
  should tell if the user has authenticated via Heroku
  #with_login_matching
    should find users matching a keyword
  #find_or_create_via_oauth
    should create a new user if one with the same login doesn't already exist
    should update an existing user's profile name and access token but not the email
  github repositories
    repository
      should contain a wrapped version of every github repository passed into it
      should understand the owner of a repository
      should understand forks created by someone other than the repos member
      should understand a repository that a user collaborates on but does not administer
      #all_remote_github_repositories
        should return all the repos the user has access to
      #all_unadded_projects for admin users
        should list all branches and clones
        should NOT list projects that the user has already added
        should contain all unadded projects from the user repo list which have been already been added by someone else
        should NOT list projects the user doesn't have access to
        should return nothing if there is an error contacting github
      #all_unadded_projects for non-admin and readonly users
        all_remote_github_repositories should should list all branches and clones
        all_unadded_projects should return red-snappers/stomata if the project already exists in the db
      #github_collaborator
        for organization owned repository
          should return true for non-admin and readonly collaborators
          should return true for admins
          should return false for a non collaborator
        users owned repo
          should return true for non-admin collaborators
          should return true for admins
          should return false for a non collaborator
    addable project
      should NOT list other people's forks as available for provisioning unless you administer them
      should list all projects which the user administers & are not other people's forks as available for provisioning
      should list provisioned projects if user is NOT a collaborator on them
      should NOT list provisioned projects if user is already a collaborator on them
      should report a project as addable if it is provisioned, even if it is neither owned nor administered by user
  login name
    should be case sensitive unique
    should save login_name with correct case
  #with_login_name
    should find user with case insensitive match
  hipchat credentials
    should have one
    should be removed when a user is deleted
  campfire credentials
    should have one
    should be removed when a user is deleted

WorkQueue
  should drop all pending build requests for halted repositories
  should skip paused projects
  deployment triggers
    should be scheduled
  multiple work queue items
    work queue items for same user
      user with one simultaneous build plan
        should only perform one build at a time
        should update the rejected build status for a project's build which was rejected due to build plan being over capacity
      user with two simultaneous build plan
        should process 2 build requests at a time (assuming they belong to different projects)
        should process 1 build if subsequent build requests belong to same project
    work queue items for different users
      2 users with single simultaneous build plan for both
        should process 1 build each when both users have multiple build requests
        should process 1 build for a user when all build requests belong to that user
    for any work queue items belonging to any user
      should not schedule worker if maintenance mode is activated
      should reject build requests if the vz host is over capacity

WorkerStatus
  should validate a default status
  should not validate a status with missing translation keys
  should return has_failure? to be false if the detection status doesn't return any error message
  should return has_failure? to be true if the detection status returns an error message
  should not return any failure message if the detection status doesn't return any error message
  should return appropriate non-admin failure message if the detection status has an error message
  success messages
    should return all success messages
    should not return any messages having the not_found keys
    should not return any messages for the gemfile, rails, rubygems, zeroci_yaml_validator key
    should not return any messages having rspec.detected or test_unit.detected keys

FirstJobCompleteEmailObserver
  should send email notification when the first job completes
  should not send email notification if job is not the first job in project

Github::API::DeployKeyObserver
  should upload deploy key to GitHub on create
  should delete deploy key from GitHub on destroy
  should raise error on deploy key if upload of key to GitHub fails
  should raise error when deploy key deletion from GitHub fails

GoProvisioningObserver
  should notify ScheduleFirstBuildJob after creating a project
  should notify DeleteProjectJob after project is deleted

ProjectProvisioningEmailObserver
  should not send email notification only when Setting#send_admin_email is '0'
  Setting send_admin_email is '1'
    should send email notification only when Setting#send_admin_email is '1'
    should send email notification when the project has provisioning errors
    should not send an email notification when the Project#provisioning_errors is not updated
    should not send email notification when the project provisioning errors is not changed
    should not send email notification when there are no project provisioning errors

Github::API::WebHookObserver
  should register web hook to GitHub on create
  should delete webhook from GitHub on destroy
  should raise error when registration of post commit hook to GitHub fails
  should raise error when web hook removal from GitHub fails

Pending:
  MixpanelTrackingJob job creation should track manual triggering
    # Temporarily disabled with xit
    # ./spec/jobs/mixpanel_tracking_job_spec.rb:34
  Notification when build status changed is called should trigger build status changed when there are hipchat credentials enabled for a project
    # Temporarily disabled with xit
    # ./spec/models/notification_spec.rb:52
  Notification when build status changed is called should trigger build status changed when there are campfire credentials enabled for a project
    # Temporarily disabled with xit
    # ./spec/models/notification_spec.rb:60

Failures:

  1) Admin::TimesController should be ok
     Failure/Error: response.should be_ok
       expected ok? to return true, got false
     # ./spec/controllers/admin/times_controller_spec.rb:6:in `block (2 levels) in <top (required)>'

Finished in 4 minutes 43.2 seconds
1460 examples, 1 failure, 3 pending

Failed examples:

rspec ./spec/controllers/admin/times_controller_spec.rb:4 # Admin::TimesController should be ok
Command bundle exec rspec --format documentation spec/models spec/jobs spec/observers spec/caches spec/helpers spec/mailers spec/controllers spec/integration failed with status 1. Took 4 minutes 52.3 seconds.
Saving console log for later
