$ git clone git://localhost/ThoughtWorksInc/gnocci .
Cloning into '.'...
Checking connectivity... done
Command git clone git://localhost/ThoughtWorksInc/gnocci . exited successfully with status 0.

$ git checkout master
Already on 'master'
Command git checkout master exited successfully with status 0.

$ git reset --hard ab58c045db121dfde023ccef7a684ab33e2dbd1d
HEAD is now at ab58c04 Move mixlib-shellout dep from Akshay's personal account to ThoughtWorksInc
Command git reset --hard ab58c045db121dfde023ccef7a684ab33e2dbd1d exited successfully with status 0.

$ git submodule update --init
Command git submodule update --init exited successfully with status 0.

$ git remote set-url --push origin 'git@github.com:ThoughtWorksInc/gnocci'
Command git remote set-url --push origin 'git@github.com:ThoughtWorksInc/gnocci' exited successfully with status 0.

$ export SNAP_CI=true
$ export CI=true
$ export LANG=en_US.UTF-8
$ export LC_ALL=en_US.UTF-8
$ export SNAP_PIPELINE_COUNTER=76
$ export SNAP_STAGE_NAME=FastFeedback
$ export SNAP_BRANCH=master
$ export SNAP_COMMIT=ab58c045db121dfde023ccef7a684ab33e2dbd1d
$ export SNAP_COMMIT_SHORT=ab58c04

$ bundle install --standalone --path bundle --local
Fetching git://github.com/ThoughtWorksInc/mixlib-shellout.git
Resolving dependencies...
Installing rake (10.1.0) 
Installing addressable (2.3.5) 
Installing ansi (1.4.3) 
Installing archive-tar-minitar (0.5.2) 
Installing cabin (0.6.1) 
Installing arr-pm (0.0.8) 
Installing json (1.8.0) 
Installing nokogiri (1.5.10) 
Installing uuidtools (2.1.4) 
Installing aws-sdk (1.25.0) 
Installing backports (3.3.5) 
Using bundler (1.3.5) 
Installing ffi (1.9.0) 
Installing childprocess (0.3.9) 
Installing clamp (0.6.1) 
Installing diff-lcs (1.2.4) 
Installing http_parser.rb (0.5.3) 
Installing ftw (0.0.36) 
Installing fpm (0.4.42) 
Using gnocci (0.0.1) from source at . 
Installing mixlib-cli (1.3.0) 
Installing mixlib-config (2.0.0) 
Using mixlib-shellout (1.2.0) from git://github.com/ThoughtWorksInc/mixlib-shellout.git (at master) 
Installing rspec-core (2.14.5) 
Installing rspec-expectations (2.14.3) 
Installing rspec-mocks (2.14.3) 
Installing rspec (2.14.1) 
Installing tagged_logging (0.1.2) 
Updating files in vendor/cache
Your bundle is complete!
It was installed into ./bundle
Command bundle install --standalone --path bundle --local exited successfully with status 0. Took 17.49 seconds.

$ bundle exec rake spec
/opt/local/ruby/2.0.0-p247/bin/ruby -S rspec spec/unit/artifact_spec.rb spec/unit/command_spec.rb spec/unit/console_log_artifact_spec.rb spec/unit/duration_formatter_spec.rb spec/unit/git_spec.rb spec/unit/mode/ci_spec.rb spec/unit/mode/pull_spec.rb spec/unit/mode/push_spec.rb spec/unit/run_list_spec.rb spec/unit/stage_spec.rb --format documentation

Gnocci::Artifact
  should create artifact tarball beginning at the artifact basepath
  round robin test, push and pull should restore artifacts to original location
  #fetch_from_storage_location
    should copy the artifacts from the artifact path to the current dir
    should abort when the fetch fails
  #push_to_storage_location
    should push the artifacts to the right path
    should abort when the push fails

Gnocci::Command
  should run the command and write the command to console log
  should write the command output to console log
  should fail with an exception when command fails
  should display the duration of a command run when requested
  should not display the duration of a command run when not requested
  should write the exit code when command executes but fails with error
  should write the stderr to console log in case command does not exist and prints to stdout
  should write signal to the stderr when the command is SIGHUP 'ed
  should write signal to the stderr when the command is SIGINT 'ed
  should write signal to the stderr when the command is SIGKILL 'ed
  should write signal to the stderr when the command is SIGPIPE 'ed
  should write signal to the stderr when the command is SIGALRM 'ed
  should write signal to the stderr when the command is SIGTERM 'ed
  should write signal to the stderr when the command is SIGXCPU 'ed
  should write signal to the stderr when the command is SIGXFSZ 'ed
  should write signal to the stderr when the command is SIGVTALRM 'ed
  should write signal to the stderr when the command is SIGPROF 'ed
  should write signal to the stderr when the command is SIGILL 'ed
  should write signal to the stderr when the command is SIGTRAP 'ed
  should write signal to the stderr when the command is SIGABRT 'ed
  should write signal to the stderr when the command is SIGFPE 'ed
  should write signal to the stderr when the command is SIGSYS 'ed
  should not write signal to the stderr when the command is SIGQUIT 'ed

Gnocci::ConsoleLogArtifact
  #push_to_storage_location should push console log to storage_path for s3 push later

Gnocci::DurationFormatter
  format duration
    < 1
      returns '0.xxxxx seconds' formatted string
    > 1 and < 60
      returns 'xx.xx seconds' formatted string
    > 60 and < 120
      returns 'x minute xx.xx seconds' formatted string
    > 120 and < 300
      returns 'x minutes xx.x seconds' formatted string
    > 300
      returns 'x minutes xx seconds' formatted string
    = 61
      returns 'x minute x second' formatted string
    = 1
      returns 'x second' formatted string
  format seconds
    uses passed in precision if specified unless result is 0
    sub second times
      returns 5 digits of precision
      strips off trailing zeroes beyond sub-second precision
      0
        strips off trailing zeroes
      > 1
        strips off trailing zeroes
    second and greater times
      returns 2 digits of precision
      returns human friendly elasped time

Gnocci::Git
  #run
    on command failure
      should fail with the right message
    .git directory does not exist
      should perform a git clone and reset
    .git directory exists
      should perform a git pull and reset

Gnocci::Mode::CI
  #run
    should perform git operations and run the stage

Gnocci::Mode::Pull
  should tell current stage to pull artifacts

Gnocci::Mode::Push
  should tell current stage to push all artifacts

Gnocci::RunList
  should initialize cli config properly
  should parse git info
  should parse pipelines and stages

Gnocci::Stage
  #run
    should run tasks in order
    should set the right env for the command
    should give preference to user set environment vars over snap declared vars
    with artifacts
      should fetch artifacts from previous stages and push current artifacts to temp location
      should run tasks in order

Finished in 3.14 seconds
58 examples, 0 failures
/opt/local/ruby/2.0.0-p247/bin/ruby -S rspec spec/integration/artifact_s3_spec.rb spec/integration/console_log_artifact_s3_spec.rb spec/integration/gnocci_spec.rb spec/integration/s3_delete_spec.rb --format documentation

Gnocci::Artifact
  #push_to_s3
    should push the artifacts to the right path
    should error out and refuse to push to s3 if the storage path does not contain anything
    should fetch and unpack the artifacts into the storage path

Gnocci::ConsoleLogArtifact
  #push_to_s3 should push console log to s3 from the local storage

Gnocci
  should switch to repo directory
  should take a run list, artifact path and a stage name and run all tasks.
  should set default environment variables
  should fail if any task fails and create artifacts

Gnocci::Mode::Delete
  should delete all artifacts for the specified project from s3

Finished in 11.98 seconds
9 examples, 0 failures
Command bundle exec rake spec exited successfully with status 0. Took 16.88 seconds.
Saving console log for later
